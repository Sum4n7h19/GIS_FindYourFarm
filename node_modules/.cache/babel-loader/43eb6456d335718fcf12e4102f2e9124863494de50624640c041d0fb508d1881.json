{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Form, FormGroup, FormLabel, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-dropdown-select\";\nimport \"../assests/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [parcels, setParcels] = useState([]);\n  const [selectedParcel, setSelectedParcel] = useState(null);\n  useEffect(() => {\n    // Fetch all parcels using Axios\n    axios.get(\"http://127.0.0.1:5000/parcel\").then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      console.log(\"Fetched data:\", response.data); // Log the fetched data\n      setParcels(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  }, []);\n  const uniqueParcels = [...new Map(parcels.map(parcel => [`${parcel.KGISStateName},${parcel.KGISDistrictName}`, parcel])).values()];\n  const stateName = uniqueParcels.map(parcel => ({\n    value: parcel.Event_id,\n    label: `${parcel.KGISStateName}`\n  }));\n  const distName = uniqueParcels.map(parcel => ({\n    value: parcel.Event_id,\n    label: `${parcel.KGISDistrictName}`\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select the Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"parcelDropdown\",\n        children: \"Select Parcel:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: stateName,\n        value: selectedParcel,\n        placeholder: \"Select a parcel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: distName,\n        value: selectedParcel,\n        placeholder: \"Select a parcel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(Menu, \"LB84AyZhNDcc3tJTjVqPLc0zOQ8=\");\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useEffect","useState","Form","FormGroup","FormLabel","FormControl","Button","axios","Select","jsxDEV","_jsxDEV","Menu","_s","parcels","setParcels","selectedParcel","setSelectedParcel","get","then","response","data","Error","console","log","catch","error","uniqueParcels","Map","map","parcel","KGISStateName","KGISDistrictName","values","stateName","value","Event_id","label","distName","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","options","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Menu.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-dropdown-select\";\r\nimport \"../assests/App.css\";\r\n\r\nconst Menu = () => {\r\n  const [parcels, setParcels] = useState([]);\r\n  const [selectedParcel, setSelectedParcel] = useState(null);\r\n  useEffect(() => {\r\n    // Fetch all parcels using Axios\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/parcel\")\r\n      .then((response) => {\r\n        if (!response.data) {\r\n          throw new Error(\"Empty response or response data is not valid JSON\");\r\n        }\r\n        console.log(\"Fetched data:\", response.data); // Log the fetched data\r\n        setParcels(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\r\n  }, []);\r\n  const uniqueParcels = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [ `${parcel.KGISStateName},${parcel.KGISDistrictName}`, parcel])\r\n    ).values(),\r\n  ];\r\n\r\n  const stateName = uniqueParcels.map((parcel) => ({\r\n    value: parcel.Event_id,\r\n    label: `${parcel.KGISStateName}`,\r\n  }));\r\n  const distName = uniqueParcels.map((parcel) => ({\r\n    value: parcel.Event_id,\r\n    label: `${parcel.KGISDistrictName}`,\r\n  }));\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"container\">\r\n        <h1>Select the Farm</h1>\r\n      <label htmlFor=\"parcelDropdown\">Select Parcel:</label>\r\n      <Select\r\n        className=\"select\"\r\n        id=\"parcelDropdown\"\r\n        options={stateName}\r\n        value={selectedParcel}\r\n        placeholder=\"Select a parcel\"\r\n      />\r\n        <Select\r\n        className=\"select\"\r\n        id=\"parcelDropdown\"\r\n        options={distName}\r\n        value={selectedParcel}\r\n        placeholder=\"Select a parcel\"\r\n      />\r\n      \r\n      </div>\r\n      </div> )}\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}