{"ast":null,"code":"// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_math_ from '../../math.js';\nvar _ol_geom_flat_simplify_ = {};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array.<number>=} opt_simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @return {Array.<number>} Simplified line string.\n */\n_ol_geom_flat_simplify_.lineString = function (flatCoordinates, offset, end, stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {\n  var simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined ? opt_simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = _ol_geom_flat_simplify_.radialDistance(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n  return simplifiedFlatCoordinates;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeucker = function (flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  var n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array.<number>} */\n  var markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array.<number>} */\n  var stack = [offset, end - stride];\n  var index = 0;\n  var i;\n  while (stack.length > 0) {\n    var last = stack.pop();\n    var first = stack.pop();\n    var maxSquaredDistance = 0;\n    var x1 = flatCoordinates[first];\n    var y1 = flatCoordinates[first + 1];\n    var x2 = flatCoordinates[last];\n    var y2 = flatCoordinates[last + 1];\n    for (i = first + stride; i < last; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      var squaredDistance = _ol_math_.squaredSegmentDistance(x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeuckers = function (flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = _ol_geom_flat_simplify_.douglasPeucker(flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeuckerss = function (flatCoordinates, offset, endss, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = _ol_geom_flat_simplify_.douglasPeuckers(flatCoordinates, offset, ends, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.radialDistance = function (flatCoordinates, offset, end, stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  var x2 = x1;\n  var y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (_ol_math_.squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n};\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\n_ol_geom_flat_simplify_.snap = function (value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n};\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantize = function (flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  var x1 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n  var y1 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  var x2, y2;\n  do {\n    x2 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n    y2 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    var x3, y3;\n    // snap the next coordinate (P3)\n    x3 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n    y3 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    var dx1 = x2 - x1;\n    var dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    var dx2 = x3 - x1;\n    var dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if (dx1 * dy2 == dy1 * dx2 && (dx1 < 0 && dx2 < dx1 || dx1 == dx2 || dx1 > 0 && dx2 > dx1) && (dy1 < 0 && dy2 < dy1 || dy1 == dy2 || dy1 > 0 && dy2 > dy1)) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantizes = function (flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = _ol_geom_flat_simplify_.quantize(flatCoordinates, offset, end, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantizess = function (flatCoordinates, offset, endss, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = _ol_geom_flat_simplify_.quantizes(flatCoordinates, offset, ends, stride, tolerance, simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n};\nexport default _ol_geom_flat_simplify_;","map":{"version":3,"names":["_ol_math_","_ol_geom_flat_simplify_","lineString","flatCoordinates","offset","end","stride","squaredTolerance","highQuality","opt_simplifiedFlatCoordinates","simplifiedFlatCoordinates","undefined","radialDistance","length","douglasPeucker","simplifiedOffset","n","markers","Array","stack","index","i","last","pop","first","maxSquaredDistance","x1","y1","x2","y2","x","y","squaredDistance","squaredSegmentDistance","push","douglasPeuckers","ends","simplifiedEnds","ii","douglasPeuckerss","endss","simplifiedEndss","snap","value","tolerance","Math","round","quantize","x3","y3","dx1","dy1","dx2","dy2","quantizes","quantizess"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/node_modules/ol/geom/flat/simplify.js"],"sourcesContent":["// Based on simplify-js https://github.com/mourner/simplify-js\n// Copyright (c) 2012, Vladimir Agafonkin\n// All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n//    1. Redistributions of source code must retain the above copyright notice,\n//       this list of conditions and the following disclaimer.\n//\n//    2. Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n// POSSIBILITY OF SUCH DAMAGE.\n\nimport _ol_math_ from '../../math.js';\nvar _ol_geom_flat_simplify_ = {};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {boolean} highQuality Highest quality.\n * @param {Array.<number>=} opt_simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @return {Array.<number>} Simplified line string.\n */\n_ol_geom_flat_simplify_.lineString = function(flatCoordinates, offset, end,\n    stride, squaredTolerance, highQuality, opt_simplifiedFlatCoordinates) {\n  var simplifiedFlatCoordinates = opt_simplifiedFlatCoordinates !== undefined ?\n    opt_simplifiedFlatCoordinates : [];\n  if (!highQuality) {\n    end = _ol_geom_flat_simplify_.radialDistance(flatCoordinates, offset, end,\n        stride, squaredTolerance,\n        simplifiedFlatCoordinates, 0);\n    flatCoordinates = simplifiedFlatCoordinates;\n    offset = 0;\n    stride = 2;\n  }\n  simplifiedFlatCoordinates.length = _ol_geom_flat_simplify_.douglasPeucker(\n      flatCoordinates, offset, end, stride, squaredTolerance,\n      simplifiedFlatCoordinates, 0);\n  return simplifiedFlatCoordinates;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeucker = function(flatCoordinates, offset, end,\n    stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  var n = (end - offset) / stride;\n  if (n < 3) {\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n          flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n          flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  /** @type {Array.<number>} */\n  var markers = new Array(n);\n  markers[0] = 1;\n  markers[n - 1] = 1;\n  /** @type {Array.<number>} */\n  var stack = [offset, end - stride];\n  var index = 0;\n  var i;\n  while (stack.length > 0) {\n    var last = stack.pop();\n    var first = stack.pop();\n    var maxSquaredDistance = 0;\n    var x1 = flatCoordinates[first];\n    var y1 = flatCoordinates[first + 1];\n    var x2 = flatCoordinates[last];\n    var y2 = flatCoordinates[last + 1];\n    for (i = first + stride; i < last; i += stride) {\n      var x = flatCoordinates[i];\n      var y = flatCoordinates[i + 1];\n      var squaredDistance = _ol_math_.squaredSegmentDistance(\n          x, y, x1, y1, x2, y2);\n      if (squaredDistance > maxSquaredDistance) {\n        index = i;\n        maxSquaredDistance = squaredDistance;\n      }\n    }\n    if (maxSquaredDistance > squaredTolerance) {\n      markers[(index - offset) / stride] = 1;\n      if (first + stride < index) {\n        stack.push(first, index);\n      }\n      if (index + stride < last) {\n        stack.push(index, last);\n      }\n    }\n  }\n  for (i = 0; i < n; ++i) {\n    if (markers[i]) {\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n          flatCoordinates[offset + i * stride];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n          flatCoordinates[offset + i * stride + 1];\n    }\n  }\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeuckers = function(flatCoordinates, offset,\n    ends, stride, squaredTolerance, simplifiedFlatCoordinates,\n    simplifiedOffset, simplifiedEnds) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = _ol_geom_flat_simplify_.douglasPeucker(\n        flatCoordinates, offset, end, stride, squaredTolerance,\n        simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.douglasPeuckerss = function(\n    flatCoordinates, offset, endss, stride, squaredTolerance,\n    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = _ol_geom_flat_simplify_.douglasPeuckers(\n        flatCoordinates, offset, ends, stride, squaredTolerance,\n        simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} squaredTolerance Squared tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.radialDistance = function(flatCoordinates, offset, end,\n    stride, squaredTolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  if (end <= offset + stride) {\n    // zero or one point, no simplification possible, so copy and return\n    for (; offset < end; offset += stride) {\n      simplifiedFlatCoordinates[simplifiedOffset++] = flatCoordinates[offset];\n      simplifiedFlatCoordinates[simplifiedOffset++] =\n          flatCoordinates[offset + 1];\n    }\n    return simplifiedOffset;\n  }\n  var x1 = flatCoordinates[offset];\n  var y1 = flatCoordinates[offset + 1];\n  // copy first point\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  var x2 = x1;\n  var y2 = y1;\n  for (offset += stride; offset < end; offset += stride) {\n    x2 = flatCoordinates[offset];\n    y2 = flatCoordinates[offset + 1];\n    if (_ol_math_.squaredDistance(x1, y1, x2, y2) > squaredTolerance) {\n      // copy point at offset\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      x1 = x2;\n      y1 = y2;\n    }\n  }\n  if (x2 != x1 || y2 != y1) {\n    // copy last point\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  }\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {number} value Value.\n * @param {number} tolerance Tolerance.\n * @return {number} Rounded value.\n */\n_ol_geom_flat_simplify_.snap = function(value, tolerance) {\n  return tolerance * Math.round(value / tolerance);\n};\n\n\n/**\n * Simplifies a line string using an algorithm designed by Tim Schaub.\n * Coordinates are snapped to the nearest value in a virtual grid and\n * consecutive duplicate coordinates are discarded.  This effectively preserves\n * topology as the simplification of any subsection of a line string is\n * independent of the rest of the line string.  This means that, for examples,\n * the common edge between two polygons will be simplified to the same line\n * string independently in both polygons.  This implementation uses a single\n * pass over the coordinates and eliminates intermediate collinear points.\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantize = function(flatCoordinates, offset, end, stride,\n    tolerance, simplifiedFlatCoordinates, simplifiedOffset) {\n  // do nothing if the line is empty\n  if (offset == end) {\n    return simplifiedOffset;\n  }\n  // snap the first coordinate (P1)\n  var x1 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n  var y1 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n  offset += stride;\n  // add the first coordinate to the output\n  simplifiedFlatCoordinates[simplifiedOffset++] = x1;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y1;\n  // find the next coordinate that does not snap to the same value as the first\n  // coordinate (P2)\n  var x2, y2;\n  do {\n    x2 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n    y2 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    if (offset == end) {\n      // all coordinates snap to the same value, the line collapses to a point\n      // push the last snapped value anyway to ensure that the output contains\n      // at least two points\n      // FIXME should we really return at least two points anyway?\n      simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n      simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n      return simplifiedOffset;\n    }\n  } while (x2 == x1 && y2 == y1);\n  while (offset < end) {\n    var x3, y3;\n    // snap the next coordinate (P3)\n    x3 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset], tolerance);\n    y3 = _ol_geom_flat_simplify_.snap(flatCoordinates[offset + 1], tolerance);\n    offset += stride;\n    // skip P3 if it is equal to P2\n    if (x3 == x2 && y3 == y2) {\n      continue;\n    }\n    // calculate the delta between P1 and P2\n    var dx1 = x2 - x1;\n    var dy1 = y2 - y1;\n    // calculate the delta between P3 and P1\n    var dx2 = x3 - x1;\n    var dy2 = y3 - y1;\n    // if P1, P2, and P3 are colinear and P3 is further from P1 than P2 is from\n    // P1 in the same direction then P2 is on the straight line between P1 and\n    // P3\n    if ((dx1 * dy2 == dy1 * dx2) &&\n        ((dx1 < 0 && dx2 < dx1) || dx1 == dx2 || (dx1 > 0 && dx2 > dx1)) &&\n        ((dy1 < 0 && dy2 < dy1) || dy1 == dy2 || (dy1 > 0 && dy2 > dy1))) {\n      // discard P2 and set P2 = P3\n      x2 = x3;\n      y2 = y3;\n      continue;\n    }\n    // either P1, P2, and P3 are not colinear, or they are colinear but P3 is\n    // between P3 and P1 or on the opposite half of the line to P2.  add P2,\n    // and continue with P1 = P2 and P2 = P3\n    simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n    simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n    x1 = x2;\n    y1 = y2;\n    x2 = x3;\n    y2 = y3;\n  }\n  // add the last point (P2)\n  simplifiedFlatCoordinates[simplifiedOffset++] = x2;\n  simplifiedFlatCoordinates[simplifiedOffset++] = y2;\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<number>} simplifiedEnds Simplified ends.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantizes = function(\n    flatCoordinates, offset, ends, stride,\n    tolerance,\n    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    var end = ends[i];\n    simplifiedOffset = _ol_geom_flat_simplify_.quantize(\n        flatCoordinates, offset, end, stride,\n        tolerance,\n        simplifiedFlatCoordinates, simplifiedOffset);\n    simplifiedEnds.push(simplifiedOffset);\n    offset = end;\n  }\n  return simplifiedOffset;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {number} tolerance Tolerance.\n * @param {Array.<number>} simplifiedFlatCoordinates Simplified flat\n *     coordinates.\n * @param {number} simplifiedOffset Simplified offset.\n * @param {Array.<Array.<number>>} simplifiedEndss Simplified endss.\n * @return {number} Simplified offset.\n */\n_ol_geom_flat_simplify_.quantizess = function(\n    flatCoordinates, offset, endss, stride,\n    tolerance,\n    simplifiedFlatCoordinates, simplifiedOffset, simplifiedEndss) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    var simplifiedEnds = [];\n    simplifiedOffset = _ol_geom_flat_simplify_.quantizes(\n        flatCoordinates, offset, ends, stride,\n        tolerance,\n        simplifiedFlatCoordinates, simplifiedOffset, simplifiedEnds);\n    simplifiedEndss.push(simplifiedEnds);\n    offset = ends[ends.length - 1];\n  }\n  return simplifiedOffset;\n};\nexport default _ol_geom_flat_simplify_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}