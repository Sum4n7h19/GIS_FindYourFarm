{"ast":null,"code":"import _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nimport _ol_geom_flat_segments_ from '../flat/segments.js';\nvar _ol_geom_flat_intersectsextent_ = {};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineString = function (flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = _ol_extent_.extendFlatCoordinates(_ol_extent_.createEmpty(), flatCoordinates, offset, end, stride);\n  if (!_ol_extent_.intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (_ol_extent_.containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] && coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] && coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return _ol_geom_flat_segments_.forEach(flatCoordinates, offset, end, stride,\n  /**\n   * @param {ol.Coordinate} point1 Start point.\n   * @param {ol.Coordinate} point2 End point.\n   * @return {boolean} `true` if the segment and the extent intersect,\n   *     `false` otherwise.\n   */\n  function (point1, point2) {\n    return _ol_extent_.intersectsSegment(extent, point1, point2);\n  });\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineStrings = function (flatCoordinates, offset, ends, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_intersectsextent_.lineString(flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRing = function (flatCoordinates, offset, end, stride, extent) {\n  if (_ol_geom_flat_intersectsextent_.lineString(flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRings = function (flatCoordinates, offset, ends, stride, extent) {\n  if (!_ol_geom_flat_intersectsextent_.linearRing(flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  var i, ii;\n  for (i = 1, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_contains_.linearRingContainsExtent(flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRingss = function (flatCoordinates, offset, endss, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (_ol_geom_flat_intersectsextent_.linearRings(flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n};\nexport default _ol_geom_flat_intersectsextent_;","map":{"version":3,"names":["_ol_extent_","_ol_geom_flat_contains_","_ol_geom_flat_segments_","_ol_geom_flat_intersectsextent_","lineString","flatCoordinates","offset","end","stride","extent","coordinatesExtent","extendFlatCoordinates","createEmpty","intersects","containsExtent","forEach","point1","point2","intersectsSegment","lineStrings","ends","i","ii","length","linearRing","linearRingContainsXY","linearRings","linearRingContainsExtent","linearRingss","endss"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/node_modules/ol/geom/flat/intersectsextent.js"],"sourcesContent":["import _ol_extent_ from '../../extent.js';\nimport _ol_geom_flat_contains_ from '../flat/contains.js';\nimport _ol_geom_flat_segments_ from '../flat/segments.js';\nvar _ol_geom_flat_intersectsextent_ = {};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineString = function(flatCoordinates, offset, end, stride, extent) {\n  var coordinatesExtent = _ol_extent_.extendFlatCoordinates(\n      _ol_extent_.createEmpty(), flatCoordinates, offset, end, stride);\n  if (!_ol_extent_.intersects(extent, coordinatesExtent)) {\n    return false;\n  }\n  if (_ol_extent_.containsExtent(extent, coordinatesExtent)) {\n    return true;\n  }\n  if (coordinatesExtent[0] >= extent[0] &&\n      coordinatesExtent[2] <= extent[2]) {\n    return true;\n  }\n  if (coordinatesExtent[1] >= extent[1] &&\n      coordinatesExtent[3] <= extent[3]) {\n    return true;\n  }\n  return _ol_geom_flat_segments_.forEach(flatCoordinates, offset, end, stride,\n      /**\n       * @param {ol.Coordinate} point1 Start point.\n       * @param {ol.Coordinate} point2 End point.\n       * @return {boolean} `true` if the segment and the extent intersect,\n       *     `false` otherwise.\n       */\n      function(point1, point2) {\n        return _ol_extent_.intersectsSegment(extent, point1, point2);\n      });\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.lineStrings = function(flatCoordinates, offset, ends, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_intersectsextent_.lineString(\n        flatCoordinates, offset, ends[i], stride, extent)) {\n      return true;\n    }\n    offset = ends[i];\n  }\n  return false;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {number} end End.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRing = function(flatCoordinates, offset, end, stride, extent) {\n  if (_ol_geom_flat_intersectsextent_.lineString(\n      flatCoordinates, offset, end, stride, extent)) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[0], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[0], extent[3])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[2], extent[1])) {\n    return true;\n  }\n  if (_ol_geom_flat_contains_.linearRingContainsXY(\n      flatCoordinates, offset, end, stride, extent[2], extent[3])) {\n    return true;\n  }\n  return false;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<number>} ends Ends.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRings = function(flatCoordinates, offset, ends, stride, extent) {\n  if (!_ol_geom_flat_intersectsextent_.linearRing(\n      flatCoordinates, offset, ends[0], stride, extent)) {\n    return false;\n  }\n  if (ends.length === 1) {\n    return true;\n  }\n  var i, ii;\n  for (i = 1, ii = ends.length; i < ii; ++i) {\n    if (_ol_geom_flat_contains_.linearRingContainsExtent(\n        flatCoordinates, ends[i - 1], ends[i], stride, extent)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n\n/**\n * @param {Array.<number>} flatCoordinates Flat coordinates.\n * @param {number} offset Offset.\n * @param {Array.<Array.<number>>} endss Endss.\n * @param {number} stride Stride.\n * @param {ol.Extent} extent Extent.\n * @return {boolean} True if the geometry and the extent intersect.\n */\n_ol_geom_flat_intersectsextent_.linearRingss = function(flatCoordinates, offset, endss, stride, extent) {\n  var i, ii;\n  for (i = 0, ii = endss.length; i < ii; ++i) {\n    var ends = endss[i];\n    if (_ol_geom_flat_intersectsextent_.linearRings(\n        flatCoordinates, offset, ends, stride, extent)) {\n      return true;\n    }\n    offset = ends[ends.length - 1];\n  }\n  return false;\n};\nexport default _ol_geom_flat_intersectsextent_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}