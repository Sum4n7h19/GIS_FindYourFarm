{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Map.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Make sure to import the Leaflet CSS\nimport data from '../map.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  data\n}) => {\n  _s();\n  const [bounds, setBounds] = useState([[0, 0], [0, 0]]);\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(0);\n  useEffect(() => {\n    if (data && data.features.length > 0) {\n      const coordinates = data.features.reduce((acc, feature) => acc.concat(feature.geometry.coordinates), []);\n      const newBounds = coordinates.reduce((acc, coord) => [[Math.min(acc[0][0], coord[1]), Math.min(acc[0][1], coord[0])], [Math.max(acc[1][0], coord[1]), Math.max(acc[1][1], coord[0])]], [[Infinity, Infinity], [-Infinity, -Infinity]]);\n      setBounds(newBounds);\n\n      // Calculate the center and zoom based on the bounds\n      const newCenter = [(newBounds[0][0] + newBounds[1][0]) / 2, (newBounds[0][1] + newBounds[1][1]) / 2];\n      const newZoom = Math.min(Math.abs(newBounds[1][0] - newBounds[0][0]), Math.abs(newBounds[1][1] - newBounds[0][1]));\n      setCenter(newCenter);\n      setZoom(newZoom);\n    }\n  }, [data]);\n  const setColor = ({\n    properties\n  }) => {\n    return {\n      weight: 1\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: center,\n    zoom: zoom,\n    className: \"map-container\",\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data,\n      style: setColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }, this);\n};\n_s(Map, \"JNOdLEDA4KvMPFZt1h74sY+ud/A=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","TileLayer","MapContainer","GeoJSON","L","data","jsxDEV","_jsxDEV","Map","_s","bounds","setBounds","center","setCenter","zoom","setZoom","features","length","coordinates","reduce","acc","feature","concat","geometry","newBounds","coord","Math","min","max","Infinity","newCenter","newZoom","abs","setColor","properties","weight","className","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Map.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\"; // Make sure to import the Leaflet CSS\r\nimport data from '../map.json'\r\n\r\nconst Map = ({data})=> {\r\n  const [bounds, setBounds] = useState([[0, 0], [0, 0]]);\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(0);\r\n\r\n  useEffect(() => {\r\n    if (data && data.features.length > 0) {\r\n      const coordinates = data.features.reduce(\r\n        (acc, feature) => acc.concat(feature.geometry.coordinates),\r\n        []\r\n      );\r\n\r\n      const newBounds = coordinates.reduce(\r\n        (acc, coord) => [\r\n          [Math.min(acc[0][0], coord[1]), Math.min(acc[0][1], coord[0])],\r\n          [Math.max(acc[1][0], coord[1]), Math.max(acc[1][1], coord[0])],\r\n        ],\r\n        [[Infinity, Infinity], [-Infinity, -Infinity]]\r\n      );\r\n\r\n      setBounds(newBounds);\r\n\r\n      // Calculate the center and zoom based on the bounds\r\n      const newCenter = [(newBounds[0][0] + newBounds[1][0]) / 2, (newBounds[0][1] + newBounds[1][1]) / 2];\r\n      const newZoom = Math.min(\r\n        Math.abs(newBounds[1][0] - newBounds[0][0]),\r\n        Math.abs(newBounds[1][1] - newBounds[0][1])\r\n      );\r\n\r\n      setCenter(newCenter);\r\n      setZoom(newZoom);\r\n    }\r\n  }, [data]);\r\n  const setColor = ({ properties }) => {\r\n    return { weight: 1 };\r\n  };\r\n\r\n  return (\r\n      <MapContainer\r\n        center={center}\r\n        zoom={zoom}\r\n        className=\"map-container\"\r\n      >\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        <GeoJSON data={data} style={setColor}/>\r\n      </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,SAAS,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAChE,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B,CAAC,CAAC;AACnC,OAAOC,IAAI,MAAM,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE9B,MAAMC,GAAG,GAAGA,CAAC;EAACH;AAAI,CAAC,KAAI;EAAAI,EAAA;EACrB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM,CAACa,MAAM,EAAEC,SAAS,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EAEnCC,SAAS,CAAC,MAAM;IACd,IAAIK,IAAI,IAAIA,IAAI,CAACW,QAAQ,CAACC,MAAM,GAAG,CAAC,EAAE;MACpC,MAAMC,WAAW,GAAGb,IAAI,CAACW,QAAQ,CAACG,MAAM,CACtC,CAACC,GAAG,EAAEC,OAAO,KAAKD,GAAG,CAACE,MAAM,CAACD,OAAO,CAACE,QAAQ,CAACL,WAAW,CAAC,EAC1D,EACF,CAAC;MAED,MAAMM,SAAS,GAAGN,WAAW,CAACC,MAAM,CAClC,CAACC,GAAG,EAAEK,KAAK,KAAK,CACd,CAACC,IAAI,CAACC,GAAG,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEC,IAAI,CAACC,GAAG,CAACP,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,EAC9D,CAACC,IAAI,CAACE,GAAG,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEK,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEC,IAAI,CAACE,GAAG,CAACR,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/D,EACD,CAAC,CAACI,QAAQ,EAAEA,QAAQ,CAAC,EAAE,CAAC,CAACA,QAAQ,EAAE,CAACA,QAAQ,CAAC,CAC/C,CAAC;MAEDlB,SAAS,CAACa,SAAS,CAAC;;MAEpB;MACA,MAAMM,SAAS,GAAG,CAAC,CAACN,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAACA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;MACpG,MAAMO,OAAO,GAAGL,IAAI,CAACC,GAAG,CACtBD,IAAI,CAACM,GAAG,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAC3CE,IAAI,CAACM,GAAG,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGA,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAC5C,CAAC;MAEDX,SAAS,CAACiB,SAAS,CAAC;MACpBf,OAAO,CAACgB,OAAO,CAAC;IAClB;EACF,CAAC,EAAE,CAAC1B,IAAI,CAAC,CAAC;EACV,MAAM4B,QAAQ,GAAGA,CAAC;IAAEC;EAAW,CAAC,KAAK;IACnC,OAAO;MAAEC,MAAM,EAAE;IAAE,CAAC;EACtB,CAAC;EAED,oBACI5B,OAAA,CAACL,YAAY;IACXU,MAAM,EAAEA,MAAO;IACfE,IAAI,EAAEA,IAAK;IACXsB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAEzB9B,OAAA,CAACN,SAAS;MACRqC,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAA0E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvF,CAAC,eACFpC,OAAA,CAACJ,OAAO;MAACE,IAAI,EAAEA,IAAK;MAACuC,KAAK,EAAEX;IAAS;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3B,CAAC;AAErB,CAAC;AAAAlC,EAAA,CAlDKD,GAAG;AAAAqC,EAAA,GAAHrC,GAAG;AAoDT,eAAeA,GAAG;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}