{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Form, FormGroup, FormLabel, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-dropdown-select\";\nimport \"../assests/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [parcels, setParcels] = useState([]);\n  const [selectedParcel, setSelectedParcel] = useState(null);\n  const [selectState, setSelectState] = useState(null);\n  const [selectDistrict, setSelectDistrict] = useState([]);\n  const [selectTaluk, setSelectTaluk] = useState([]);\n  const [selectHobli, setSelectHobli] = useState([]);\n  const [selctVillage, setSelctVillage] = useState([]);\n  useEffect(() => {\n    // Fetch all parcels using Axios\n    axios.get(\"http://127.0.0.1:5000/parcel\").then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      console.log(\"Fetched data:\", response.data); // Log the fetched data\n      setParcels(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  }, []);\n  const State = [...new Map(parcels.map(parcel => [parcel.KGISStateName, parcel])).values()];\n  const District = [...new Map(parcels.map(parcel => [parcel.KGISDistrictName, parcel])).values()];\n  const Taluk = [...new Map(parcels.map(parcel => [parcel.KGISTalukID, parcel])).values()];\n  const Hobli = [...new Map(parcels.map(parcel => [parcel.KGISHobliID, parcel])).values()];\n  const Village = [...new Map(parcels.map(parcel => [parcel.KGISVillageID, parcel])).values()];\n  const stateName = State.map(parcel => ({\n    value: parcel.KGISStateID,\n    label: `${parcel.KGISStateName}`\n  }));\n  const distName = District.map(parcel => ({\n    value: parcel.KGISDistrictID,\n    label: `${parcel.KGISDistrictName}`\n  }));\n  const talukName = Taluk.map(parcel => ({\n    value: parcel.KGISTalukID,\n    label: `${parcel.KGISTalukName}`\n  }));\n  const hobliName = Hobli.map(parcel => ({\n    value: parcel.KGISHobliID,\n    label: parcel.KGISHobliName\n  }));\n  const villageName = Village.map(parcel => ({\n    value: parcel.KGISVillageID,\n    label: parcel.KGISVillageName\n  }));\n  const handleState = stateName => {\n    setSelectState(stateName);\n    console.log(stateName);\n    setSelectDistrict(null);\n    setSelectTaluk(null);\n    setSelectHobli(null);\n    setSelctVillage(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select the Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"parcelDropdown\",\n        children: \"Select Parcel:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: stateName,\n        value: selectState,\n        onChange: handleState,\n        placeholder: \"Select State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: distName,\n        value: selectDistrict,\n        placeholder: \"Select District\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: talukName,\n        value: selectedParcel,\n        placeholder: \"Select Taluk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: hobliName,\n        value: selectedParcel,\n        placeholder: \"Select Hobli\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"parcelDropdown\",\n        options: villageName,\n        value: selectedParcel,\n        placeholder: \"Select Village\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(FormControl, {\n          className: \"surveyno\",\n          type: \"number\",\n          placeholder: \"Survey no\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 10\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"Submit\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(Menu, \"9wUVNP2UbM5zjNsz9spLLQOc4Bg=\");\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useEffect","useState","Form","FormGroup","FormLabel","FormControl","Button","axios","Select","jsxDEV","_jsxDEV","Menu","_s","parcels","setParcels","selectedParcel","setSelectedParcel","selectState","setSelectState","selectDistrict","setSelectDistrict","selectTaluk","setSelectTaluk","selectHobli","setSelectHobli","selctVillage","setSelctVillage","get","then","response","data","Error","console","log","catch","error","State","Map","map","parcel","KGISStateName","values","District","KGISDistrictName","Taluk","KGISTalukID","Hobli","KGISHobliID","Village","KGISVillageID","stateName","value","KGISStateID","label","distName","KGISDistrictID","talukName","KGISTalukName","hobliName","KGISHobliName","villageName","KGISVillageName","handleState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","options","onChange","placeholder","type","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Menu.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-dropdown-select\";\r\nimport \"../assests/App.css\";\r\n\r\nconst Menu = () => {\r\n  const [parcels, setParcels] = useState([]);\r\n  const [selectedParcel, setSelectedParcel] = useState(null);\r\n  const [selectState, setSelectState] = useState(null)\r\n  const [selectDistrict, setSelectDistrict] = useState([])\r\n  const [selectTaluk, setSelectTaluk] = useState([])\r\n  const [selectHobli, setSelectHobli] = useState([])\r\n  const [selctVillage, setSelctVillage] = useState([])\r\n  useEffect(() => {\r\n    // Fetch all parcels using Axios\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/parcel\")\r\n      .then((response) => {\r\n        if (!response.data) {\r\n          throw new Error(\"Empty response or response data is not valid JSON\");\r\n        }\r\n        console.log(\"Fetched data:\", response.data); // Log the fetched data\r\n        setParcels(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\r\n  }, []);\r\n  const State = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISStateName, parcel])\r\n    ).values(),\r\n  ];\r\n  const District = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISDistrictName, parcel])\r\n    ).values(),\r\n  ];\r\n  const Taluk = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISTalukID, parcel])\r\n    ).values(),\r\n  ];\r\n  const Hobli = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISHobliID, parcel])\r\n    ).values(),\r\n  ];\r\n  const Village = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISVillageID, parcel])\r\n    ).values(),\r\n  ];\r\n\r\n  const stateName = State.map((parcel) => ({\r\n    value: parcel.KGISStateID,\r\n    label: `${parcel.KGISStateName}`,\r\n  }));\r\n  const distName = District.map((parcel) => ({\r\n    value: parcel.KGISDistrictID,\r\n    label: `${parcel.KGISDistrictName}`,\r\n  }));\r\n  const talukName = Taluk.map((parcel) => ({\r\n    value: parcel.KGISTalukID,\r\n    label: `${parcel.KGISTalukName}`,\r\n  }));\r\n  const hobliName = Hobli.map(parcel => ({\r\n    value: parcel.KGISHobliID,\r\n    label: parcel.KGISHobliName\r\n  }));\r\n  const villageName = Village.map(parcel => ({\r\n    value: parcel.KGISVillageID,\r\n    label: parcel.KGISVillageName\r\n  }));\r\n\r\n  const handleState = (stateName) => {\r\n    setSelectState(stateName)\r\n    console.log(stateName)\r\n    setSelectDistrict(null)\r\n    setSelectTaluk(null)\r\n    setSelectHobli(null)\r\n    setSelctVillage(null)\r\n  } \r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"container\">\r\n        <h1>Select the Farm</h1>\r\n        <label htmlFor=\"parcelDropdown\">Select Parcel:</label>\r\n        <Select\r\n          className=\"select\"\r\n          id=\"parcelDropdown\"\r\n          options={stateName}\r\n          value={selectState}\r\n          onChange={handleState}\r\n          placeholder=\"Select State\"\r\n        />\r\n        <Select\r\n          className=\"select\"\r\n          id=\"parcelDropdown\"\r\n          options={distName}\r\n          value={selectDistrict}\r\n          placeholder=\"Select District\"\r\n        />\r\n        <Select\r\n          className=\"select\"\r\n          id=\"parcelDropdown\"\r\n          options={talukName}\r\n          value={selectedParcel}\r\n          placeholder=\"Select Taluk\"\r\n        />\r\n          <Select\r\n          className=\"select\"\r\n          id=\"parcelDropdown\"\r\n          options={hobliName}\r\n          value={selectedParcel}\r\n          placeholder=\"Select Hobli\"\r\n        />\r\n           <Select\r\n          className=\"select\"\r\n          id=\"parcelDropdown\"\r\n          options={villageName}\r\n          value={selectedParcel}\r\n          placeholder=\"Select Village\"\r\n        />\r\n        <Form>\r\n         <FormControl\r\n            className=\"surveyno\"\r\n            type=\"number\"\r\n            placeholder=\"Survey no\"\r\n          />\r\n\r\n          <Button type=\"Submit\">Submit</Button>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}