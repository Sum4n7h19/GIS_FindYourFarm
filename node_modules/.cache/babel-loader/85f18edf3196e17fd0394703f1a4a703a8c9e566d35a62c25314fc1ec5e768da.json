{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Form, FormGroup, FormLabel, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-dropdown-select\";\nimport \"../assests/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [parcels, setParcels] = useState([]);\n  const [selectedOptions, setSelectedOptions] = useState({});\n  useEffect(() => {\n    // Fetch all parcels using Axios\n    axios.get(\"http://127.0.0.1:5000/parcel\").then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      console.log(\"Fetched data:\", response.data); // Log the fetched data\n      setParcels(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  }, []);\n  const handleSelectChange = (value, column) => {\n    setSelectedOptions(prevOptions => ({\n      ...prevOptions,\n      [column]: value\n    }));\n  };\n  const getColumnOptions = column => {\n    const uniqueValues = [...new Set(parcels.map(parcel => parcel[column]))];\n    return uniqueValues.map(value => ({\n      value,\n      label: value\n    }));\n  };\n  const renderDropdowns = () => {\n    const columns = Object.keys(parcels[0] || {});\n    const nameColumns = columns.filter(column => column.endsWith('Name'));\n    return nameColumns.map(column => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: column,\n        children: [column, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: column,\n        options: getColumnOptions(column),\n        value: selectedOptions[column],\n        onChange: value => handleSelectChange(value, column),\n        isMulti: true,\n        placeholder: `Select ${column}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, column, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: renderDropdowns()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n_s(Menu, \"jt/acRDgmO1FY1OUBjeuttOM6ks=\");\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useEffect","useState","Form","FormGroup","FormLabel","FormControl","Button","axios","Select","jsxDEV","_jsxDEV","Menu","_s","parcels","setParcels","selectedOptions","setSelectedOptions","get","then","response","data","Error","console","log","catch","error","handleSelectChange","value","column","prevOptions","getColumnOptions","uniqueValues","Set","map","parcel","label","renderDropdowns","columns","Object","keys","nameColumns","filter","endsWith","style","marginBottom","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","className","id","options","onChange","isMulti","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Menu.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-dropdown-select\";\r\nimport \"../assests/App.css\";\r\n\r\nconst Menu = () => {\r\n  const [parcels, setParcels] = useState([]);\r\n  const [selectedOptions, setSelectedOptions] = useState({});\r\n  useEffect(() => {\r\n    // Fetch all parcels using Axios\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/parcel\")\r\n      .then((response) => {\r\n        if (!response.data) {\r\n          throw new Error(\"Empty response or response data is not valid JSON\");\r\n        }\r\n        console.log(\"Fetched data:\", response.data); // Log the fetched data\r\n        setParcels(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\r\n  }, []);\r\n\r\n  const handleSelectChange = (value, column) => {\r\n    setSelectedOptions((prevOptions) => ({\r\n      ...prevOptions,\r\n      [column]: value,\r\n    }));\r\n  };\r\n\r\n  const getColumnOptions = (column) => {\r\n    const uniqueValues = [...new Set(parcels.map((parcel) => parcel[column]))];\r\n    return uniqueValues.map((value) => ({ value, label: value }));\r\n  };\r\n\r\n  const renderDropdowns = () => {\r\n    const columns = Object.keys(parcels[0] || {});\r\n    const nameColumns = columns.filter(column => column.endsWith('Name'));\r\n\r\n    return nameColumns.map((column) => (\r\n      <div key={column} style={{ marginBottom: \"20px\" }}>\r\n        <label htmlFor={column}>{column}:</label>\r\n        <Select\r\n        className=\"select\"\r\n          id={column}\r\n          options={getColumnOptions(column)}\r\n          value={selectedOptions[column]}\r\n          onChange={(value) => handleSelectChange(value, column)}\r\n          isMulti\r\n          placeholder={`Select ${column}`}\r\n        />\r\n      </div>\r\n    ));\r\n  };\r\n  return (\r\n    <div>\r\n      {renderDropdowns()}\r\n      {/* Add other components or display selected values as needed */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}