{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Map.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef } from \"react\";\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // Make sure to import the Leaflet CSS\nimport data from \"../map.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  data\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const setColor = ({\n    properties\n  }) => {\n    return {\n      weight: 1,\n      color: \"red\"\n    };\n  };\n  console.log(mapRef);\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    center: [13.21, 76.15],\n    zoom: 7,\n    className: \"map-container\",\n    whenCreated: map => {\n      mapRef.current = map;\n      if (mapRef.current && data !== null) {\n        // Create a GeoJSON layer with the fetched data\n        const geoJsonLayer = new L.GeoJSON(data);\n\n        // Get the bounds of the GeoJSON layer\n        const bounds = geoJsonLayer.getBounds();\n\n        // Access the Leaflet map instance using the ref and fit the map to the bounds\n        mapRef.current.fitBounds(bounds);\n      }\n    },\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: data,\n      style: setColor\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"eZwvXZNGrOinO8i65lLhOza0GRY=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useRef","TileLayer","MapContainer","GeoJSON","L","data","jsxDEV","_jsxDEV","Map","_s","mapRef","setColor","properties","weight","color","console","log","center","zoom","className","whenCreated","map","current","geoJsonLayer","bounds","getBounds","fitBounds","children","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","style","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Map.jsx"],"sourcesContent":["import React, { useRef } from \"react\";\r\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport \"leaflet/dist/leaflet.css\"; // Make sure to import the Leaflet CSS\r\nimport data from \"../map.json\";\r\n\r\nconst Map = ({ data }) => {\r\n  const mapRef = useRef(null);\r\n\r\n  const setColor = ({ properties }) => {\r\n    return { weight: 1, color: \"red\" };\r\n  };\r\n  console.log(mapRef);\r\n\r\n  return (\r\n    <MapContainer\r\n      center={[13.21, 76.15]}\r\n      zoom={7}\r\n      className=\"map-container\"\r\n      whenCreated={(map) => {\r\n        mapRef.current = map;\r\n        if (mapRef.current && data !== null) {\r\n          // Create a GeoJSON layer with the fetched data\r\n          const geoJsonLayer = new L.GeoJSON(data);\r\n\r\n          // Get the bounds of the GeoJSON layer\r\n          const bounds = geoJsonLayer.getBounds();\r\n\r\n          // Access the Leaflet map instance using the ref and fit the map to the bounds\r\n          mapRef.current.fitBounds(bounds);\r\n        }\r\n      }}\r\n    >\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n      />\r\n      <GeoJSON data={data} style={setColor} />\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,MAAM,QAAQ,OAAO;AACrC,SAASC,SAAS,EAAEC,YAAY,EAAEC,OAAO,QAAQ,eAAe;AAChE,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAO,0BAA0B,CAAC,CAAC;AACnC,OAAOC,IAAI,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/B,MAAMC,GAAG,GAAGA,CAAC;EAAEH;AAAK,CAAC,KAAK;EAAAI,EAAA;EACxB,MAAMC,MAAM,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAMW,QAAQ,GAAGA,CAAC;IAAEC;EAAW,CAAC,KAAK;IACnC,OAAO;MAAEC,MAAM,EAAE,CAAC;MAAEC,KAAK,EAAE;IAAM,CAAC;EACpC,CAAC;EACDC,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;EAEnB,oBACEH,OAAA,CAACL,YAAY;IACXe,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAE;IACvBC,IAAI,EAAE,CAAE;IACRC,SAAS,EAAC,eAAe;IACzBC,WAAW,EAAGC,GAAG,IAAK;MACpBX,MAAM,CAACY,OAAO,GAAGD,GAAG;MACpB,IAAIX,MAAM,CAACY,OAAO,IAAIjB,IAAI,KAAK,IAAI,EAAE;QACnC;QACA,MAAMkB,YAAY,GAAG,IAAInB,CAAC,CAACD,OAAO,CAACE,IAAI,CAAC;;QAExC;QACA,MAAMmB,MAAM,GAAGD,YAAY,CAACE,SAAS,CAAC,CAAC;;QAEvC;QACAf,MAAM,CAACY,OAAO,CAACI,SAAS,CAACF,MAAM,CAAC;MAClC;IACF,CAAE;IAAAG,QAAA,gBAEFpB,OAAA,CAACN,SAAS;MACR2B,GAAG,EAAC,oDAAoD;MACxDC,WAAW,EAAC;IAA0E;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvF,CAAC,eACF1B,OAAA,CAACJ,OAAO;MAACE,IAAI,EAAEA,IAAK;MAAC6B,KAAK,EAAEvB;IAAS;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEnB,CAAC;AAACxB,EAAA,CAlCID,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAoCT,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}