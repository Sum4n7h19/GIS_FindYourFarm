{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Form, FormGroup, FormLabel, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-dropdown-select\";\nimport \"../assests/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [parcels, setParcels] = useState([]);\n  const [selectedParcel, setSelectedParcel] = useState(null);\n  useEffect(() => {\n    // Fetch all parcels using Axios\n    axios.get(\"http://127.0.0.1:5000/parcel\").then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      console.log(\"Fetched data:\", response.data); // Log the fetched data\n      setParcels(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  }, []);\n  const State = [...new Map(parcels.map(parcel => [parcel.KGISStateName, parcel])).values()];\n  const getFilteredOptions = (options, selectedValue) => {\n    return options.filter(option => option.parentId === selectedValue);\n  };\n  const stateName = State.map(parcel => ({\n    value: parcel.Event_id,\n    label: `${parcel.KGISStateName}`\n  }));\n  const distName = getFilteredOptions(parcels.map(parcel => ({\n    value: parcel.KGISDistrictID,\n    label: parcel.KGISDistrictName,\n    parentId: parcel.KGISStateID\n  })), selectedState);\n  const talukName = getFilteredOptions(parcels.map(parcel => ({\n    value: parcel.KGISTalukID,\n    label: parcel.KGISTalukName,\n    parentId: parcel.KGISDistrictID\n  })), selectedDistrict);\n  const hobliName = getFilteredOptions(parcels.map(parcel => ({\n    value: parcel.KGISHobliID,\n    label: parcel.KGISHobliName,\n    parentId: parcel.KGISTalukID\n  })), selectedTaluk);\n  const villageName = getFilteredOptions(parcels.map(parcel => ({\n    value: parcel.KGISVillageID,\n    label: parcel.KGISVillageName,\n    parentId: parcel.KGISHobliID\n  })), selectedHobli);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select the Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"parcelDropdown\",\n        children: \"Select Parcel:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"stateDropdown\",\n        options: stateName,\n        value: selectedState,\n        onChange: selected => setSelectedState(selected),\n        placeholder: \"Select State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"districtDropdown\",\n        options: distName,\n        value: selectedDistrict,\n        onChange: selected => setSelectedDistrict(selected),\n        placeholder: \"Select District\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"talukDropdown\",\n        options: talukName,\n        value: selectedTaluk,\n        onChange: selected => setSelectedTaluk(selected),\n        placeholder: \"Select Taluk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"hobliDropdown\",\n        options: hobliName,\n        value: selectedHobli,\n        onChange: selected => setSelectedHobli(selected),\n        placeholder: \"Select Hobli\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"villageDropdown\",\n        options: villageName,\n        value: selectedVillage,\n        onChange: selected => setSelectedVillage(selected),\n        placeholder: \"Select Village\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(Menu, \"LB84AyZhNDcc3tJTjVqPLc0zOQ8=\");\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useEffect","useState","Form","FormGroup","FormLabel","FormControl","Button","axios","Select","jsxDEV","_jsxDEV","Menu","_s","parcels","setParcels","selectedParcel","setSelectedParcel","get","then","response","data","Error","console","log","catch","error","State","Map","map","parcel","KGISStateName","values","getFilteredOptions","options","selectedValue","filter","option","parentId","stateName","value","Event_id","label","distName","KGISDistrictID","KGISDistrictName","KGISStateID","selectedState","talukName","KGISTalukID","KGISTalukName","selectedDistrict","hobliName","KGISHobliID","KGISHobliName","selectedTaluk","villageName","KGISVillageID","KGISVillageName","selectedHobli","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","selected","setSelectedState","placeholder","setSelectedDistrict","setSelectedTaluk","setSelectedHobli","selectedVillage","setSelectedVillage","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Menu.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-dropdown-select\";\r\nimport \"../assests/App.css\";\r\n\r\nconst Menu = () => {\r\n  const [parcels, setParcels] = useState([]);\r\n  const [selectedParcel, setSelectedParcel] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch all parcels using Axios\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/parcel\")\r\n      .then((response) => {\r\n        if (!response.data) {\r\n          throw new Error(\"Empty response or response data is not valid JSON\");\r\n        }\r\n        console.log(\"Fetched data:\", response.data); // Log the fetched data\r\n        setParcels(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\r\n  }, []);\r\n  \r\n  const State = [\r\n    ...new Map(\r\n      parcels.map((parcel) => [parcel.KGISStateName, parcel])\r\n    ).values(),\r\n  ];\r\n  const getFilteredOptions = (options, selectedValue) => {\r\n    return options.filter((option) => option.parentId === selectedValue);\r\n  };\r\n\r\n  const stateName = State.map((parcel) => ({\r\n    value: parcel.Event_id,\r\n    label: `${parcel.KGISStateName}`,\r\n  }));\r\n  const distName = getFilteredOptions(\r\n    parcels.map((parcel) => ({\r\n      value: parcel.KGISDistrictID,\r\n      label: parcel.KGISDistrictName,\r\n      parentId: parcel.KGISStateID,\r\n    })),\r\n    selectedState\r\n  );\r\n  const talukName = getFilteredOptions(\r\n    parcels.map((parcel) => ({\r\n      value: parcel.KGISTalukID,\r\n      label: parcel.KGISTalukName,\r\n      parentId: parcel.KGISDistrictID,\r\n    })),\r\n    selectedDistrict\r\n  );\r\n  const hobliName = getFilteredOptions(\r\n    parcels.map((parcel) => ({\r\n      value: parcel.KGISHobliID,\r\n      label: parcel.KGISHobliName,\r\n      parentId: parcel.KGISTalukID,\r\n    })),\r\n    selectedTaluk\r\n  );\r\n  const villageName =getFilteredOptions(\r\n    parcels.map((parcel) => ({\r\n      value: parcel.KGISVillageID,\r\n      label: parcel.KGISVillageName,\r\n      parentId: parcel.KGISHobliID,\r\n    })),\r\n    selectedHobli\r\n  );\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"container\">\r\n        <h1>Select the Farm</h1>\r\n        <label htmlFor=\"parcelDropdown\">Select Parcel:</label>\r\n        <Select\r\n          className=\"select\"\r\n          id=\"stateDropdown\"\r\n          options={stateName}\r\n          value={selectedState}\r\n          onChange={(selected) => setSelectedState(selected)}\r\n          placeholder=\"Select State\"\r\n        />\r\n        \r\n        <Select\r\n          className=\"select\"\r\n          id=\"districtDropdown\"\r\n          options={distName}\r\n          value={selectedDistrict}\r\n          onChange={(selected) => setSelectedDistrict(selected)}\r\n          placeholder=\"Select District\"\r\n        />\r\n        \r\n        <Select\r\n          className=\"select\"\r\n          id=\"talukDropdown\"\r\n          options={talukName}\r\n          value={selectedTaluk}\r\n          onChange={(selected) => setSelectedTaluk(selected)}\r\n          placeholder=\"Select Taluk\"\r\n        />\r\n       \r\n        <Select\r\n          className=\"select\"\r\n          id=\"hobliDropdown\"\r\n          options={hobliName}\r\n          value={selectedHobli}\r\n          onChange={(selected) => setSelectedHobli(selected)}\r\n          placeholder=\"Select Hobli\"\r\n        />\r\n       \r\n        <Select\r\n          className=\"select\"\r\n          id=\"villageDropdown\"\r\n          options={villageName}\r\n          value={selectedVillage}\r\n          onChange={(selected) => setSelectedVillage(selected)}\r\n          placeholder=\"Select Village\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}