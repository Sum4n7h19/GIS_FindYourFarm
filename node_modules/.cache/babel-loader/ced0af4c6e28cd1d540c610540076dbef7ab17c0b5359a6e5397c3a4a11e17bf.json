{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_ObjectEventType_ from './objecteventtype.js';\nimport _ol_Observable_ from './observable.js';\nimport _ol_events_Event_ from './events/event.js';\nimport _ol_obj_ from './obj.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link ol.Observable} with observable properties, where each\n * property is observable as well as the object as a whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link ol.Map} has a `target` property, accessed with `getTarget()`  and\n * changed with `setTarget()`. Not all properties are however settable. There\n * are also general-purpose accessors `get()` and `set()`. For example,\n * `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link ol.View} has a `center`\n * property, so `view.on('change:center', function(evt) {...});` would call the\n * function whenever the value of the center property changes. Within the\n * function, `evt.target` would be the view, so `evt.target.getCenter()` would\n * return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link ol.Object#getProperties object.getProperties()}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @constructor\n * @extends {ol.Observable}\n * @param {Object.<string, *>=} opt_values An object with key-value pairs.\n * @fires ol.Object.Event\n * @api\n */\nvar _ol_Object_ = function (opt_values) {\n  _ol_Observable_.call(this);\n\n  // Call ol.getUid to ensure that the order of objects' ids is the same as\n  // the order in which they were created.  This also helps to ensure that\n  // object properties are always added in the same order, which helps many\n  // JavaScript engines generate faster code.\n  _ol_.getUid(this);\n\n  /**\n   * @private\n   * @type {!Object.<string, *>}\n   */\n  this.values_ = {};\n  if (opt_values !== undefined) {\n    this.setProperties(opt_values);\n  }\n};\n_ol_.inherits(_ol_Object_, _ol_Observable_);\n\n/**\n * @private\n * @type {Object.<string, string>}\n */\n_ol_Object_.changeEventTypeCache_ = {};\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\n_ol_Object_.getChangeEventType = function (key) {\n  return _ol_Object_.changeEventTypeCache_.hasOwnProperty(key) ? _ol_Object_.changeEventTypeCache_[key] : _ol_Object_.changeEventTypeCache_[key] = 'change:' + key;\n};\n\n/**\n * Gets a value.\n * @param {string} key Key name.\n * @return {*} Value.\n * @api\n */\n_ol_Object_.prototype.get = function (key) {\n  var value;\n  if (this.values_.hasOwnProperty(key)) {\n    value = this.values_[key];\n  }\n  return value;\n};\n\n/**\n * Get a list of object property names.\n * @return {Array.<string>} List of property names.\n * @api\n */\n_ol_Object_.prototype.getKeys = function () {\n  return Object.keys(this.values_);\n};\n\n/**\n * Get an object of all property names and values.\n * @return {Object.<string, *>} Object.\n * @api\n */\n_ol_Object_.prototype.getProperties = function () {\n  return _ol_obj_.assign({}, this.values_);\n};\n\n/**\n * @param {string} key Key name.\n * @param {*} oldValue Old value.\n */\n_ol_Object_.prototype.notify = function (key, oldValue) {\n  var eventType;\n  eventType = _ol_Object_.getChangeEventType(key);\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n  eventType = _ol_ObjectEventType_.PROPERTYCHANGE;\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n};\n\n/**\n * Sets a value.\n * @param {string} key Key name.\n * @param {*} value Value.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.set = function (key, value, opt_silent) {\n  if (opt_silent) {\n    this.values_[key] = value;\n  } else {\n    var oldValue = this.values_[key];\n    this.values_[key] = value;\n    if (oldValue !== value) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n/**\n * Sets a collection of key-value pairs.  Note that this changes any existing\n * properties and adds new ones (it does not remove any existing properties).\n * @param {Object.<string, *>} values Values.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.setProperties = function (values, opt_silent) {\n  var key;\n  for (key in values) {\n    this.set(key, values[key], opt_silent);\n  }\n};\n\n/**\n * Unsets a property.\n * @param {string} key Key name.\n * @param {boolean=} opt_silent Unset without triggering an event.\n * @api\n */\n_ol_Object_.prototype.unset = function (key, opt_silent) {\n  if (key in this.values_) {\n    var oldValue = this.values_[key];\n    delete this.values_[key];\n    if (!opt_silent) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n/**\n * @classdesc\n * Events emitted by {@link ol.Object} instances are instances of this type.\n *\n * @param {string} type The event type.\n * @param {string} key The property name.\n * @param {*} oldValue The old value for `key`.\n * @extends {ol.events.Event}\n * @implements {oli.Object.Event}\n * @constructor\n */\n_ol_Object_.Event = function (type, key, oldValue) {\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The name of the property whose value is changing.\n   * @type {string}\n   * @api\n   */\n  this.key = key;\n\n  /**\n   * The old value. To get the new value use `e.target.get(e.key)` where\n   * `e` is the event object.\n   * @type {*}\n   * @api\n   */\n  this.oldValue = oldValue;\n};\n_ol_.inherits(_ol_Object_.Event, _ol_events_Event_);\nexport default _ol_Object_;","map":{"version":3,"names":["_ol_","_ol_ObjectEventType_","_ol_Observable_","_ol_events_Event_","_ol_obj_","_ol_Object_","opt_values","call","getUid","values_","undefined","setProperties","inherits","changeEventTypeCache_","getChangeEventType","key","hasOwnProperty","prototype","get","value","getKeys","Object","keys","getProperties","assign","notify","oldValue","eventType","dispatchEvent","Event","PROPERTYCHANGE","set","opt_silent","values","unset","type"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/node_modules/ol/object.js"],"sourcesContent":["import _ol_ from './index.js';\nimport _ol_ObjectEventType_ from './objecteventtype.js';\nimport _ol_Observable_ from './observable.js';\nimport _ol_events_Event_ from './events/event.js';\nimport _ol_obj_ from './obj.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Most non-trivial classes inherit from this.\n *\n * This extends {@link ol.Observable} with observable properties, where each\n * property is observable as well as the object as a whole.\n *\n * Classes that inherit from this have pre-defined properties, to which you can\n * add your owns. The pre-defined properties are listed in this documentation as\n * 'Observable Properties', and have their own accessors; for example,\n * {@link ol.Map} has a `target` property, accessed with `getTarget()`  and\n * changed with `setTarget()`. Not all properties are however settable. There\n * are also general-purpose accessors `get()` and `set()`. For example,\n * `get('target')` is equivalent to `getTarget()`.\n *\n * The `set` accessors trigger a change event, and you can monitor this by\n * registering a listener. For example, {@link ol.View} has a `center`\n * property, so `view.on('change:center', function(evt) {...});` would call the\n * function whenever the value of the center property changes. Within the\n * function, `evt.target` would be the view, so `evt.target.getCenter()` would\n * return the new center.\n *\n * You can add your own observable properties with\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\n * You can listen for changes on that property value with\n * `object.on('change:prop', listener)`. You can get a list of all\n * properties with {@link ol.Object#getProperties object.getProperties()}.\n *\n * Note that the observable properties are separate from standard JS properties.\n * You can, for example, give your map object a title with\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\n * first will be a `hasOwnProperty`; the second will appear in\n * `getProperties()`. Only the second is observable.\n *\n * Properties can be deleted by using the unset method. E.g.\n * object.unset('foo').\n *\n * @constructor\n * @extends {ol.Observable}\n * @param {Object.<string, *>=} opt_values An object with key-value pairs.\n * @fires ol.Object.Event\n * @api\n */\nvar _ol_Object_ = function(opt_values) {\n  _ol_Observable_.call(this);\n\n  // Call ol.getUid to ensure that the order of objects' ids is the same as\n  // the order in which they were created.  This also helps to ensure that\n  // object properties are always added in the same order, which helps many\n  // JavaScript engines generate faster code.\n  _ol_.getUid(this);\n\n  /**\n   * @private\n   * @type {!Object.<string, *>}\n   */\n  this.values_ = {};\n\n  if (opt_values !== undefined) {\n    this.setProperties(opt_values);\n  }\n};\n\n_ol_.inherits(_ol_Object_, _ol_Observable_);\n\n\n/**\n * @private\n * @type {Object.<string, string>}\n */\n_ol_Object_.changeEventTypeCache_ = {};\n\n\n/**\n * @param {string} key Key name.\n * @return {string} Change name.\n */\n_ol_Object_.getChangeEventType = function(key) {\n  return _ol_Object_.changeEventTypeCache_.hasOwnProperty(key) ?\n    _ol_Object_.changeEventTypeCache_[key] :\n    (_ol_Object_.changeEventTypeCache_[key] = 'change:' + key);\n};\n\n\n/**\n * Gets a value.\n * @param {string} key Key name.\n * @return {*} Value.\n * @api\n */\n_ol_Object_.prototype.get = function(key) {\n  var value;\n  if (this.values_.hasOwnProperty(key)) {\n    value = this.values_[key];\n  }\n  return value;\n};\n\n\n/**\n * Get a list of object property names.\n * @return {Array.<string>} List of property names.\n * @api\n */\n_ol_Object_.prototype.getKeys = function() {\n  return Object.keys(this.values_);\n};\n\n\n/**\n * Get an object of all property names and values.\n * @return {Object.<string, *>} Object.\n * @api\n */\n_ol_Object_.prototype.getProperties = function() {\n  return _ol_obj_.assign({}, this.values_);\n};\n\n\n/**\n * @param {string} key Key name.\n * @param {*} oldValue Old value.\n */\n_ol_Object_.prototype.notify = function(key, oldValue) {\n  var eventType;\n  eventType = _ol_Object_.getChangeEventType(key);\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n  eventType = _ol_ObjectEventType_.PROPERTYCHANGE;\n  this.dispatchEvent(new _ol_Object_.Event(eventType, key, oldValue));\n};\n\n\n/**\n * Sets a value.\n * @param {string} key Key name.\n * @param {*} value Value.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.set = function(key, value, opt_silent) {\n  if (opt_silent) {\n    this.values_[key] = value;\n  } else {\n    var oldValue = this.values_[key];\n    this.values_[key] = value;\n    if (oldValue !== value) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n\n/**\n * Sets a collection of key-value pairs.  Note that this changes any existing\n * properties and adds new ones (it does not remove any existing properties).\n * @param {Object.<string, *>} values Values.\n * @param {boolean=} opt_silent Update without triggering an event.\n * @api\n */\n_ol_Object_.prototype.setProperties = function(values, opt_silent) {\n  var key;\n  for (key in values) {\n    this.set(key, values[key], opt_silent);\n  }\n};\n\n\n/**\n * Unsets a property.\n * @param {string} key Key name.\n * @param {boolean=} opt_silent Unset without triggering an event.\n * @api\n */\n_ol_Object_.prototype.unset = function(key, opt_silent) {\n  if (key in this.values_) {\n    var oldValue = this.values_[key];\n    delete this.values_[key];\n    if (!opt_silent) {\n      this.notify(key, oldValue);\n    }\n  }\n};\n\n\n/**\n * @classdesc\n * Events emitted by {@link ol.Object} instances are instances of this type.\n *\n * @param {string} type The event type.\n * @param {string} key The property name.\n * @param {*} oldValue The old value for `key`.\n * @extends {ol.events.Event}\n * @implements {oli.Object.Event}\n * @constructor\n */\n_ol_Object_.Event = function(type, key, oldValue) {\n  _ol_events_Event_.call(this, type);\n\n  /**\n   * The name of the property whose value is changing.\n   * @type {string}\n   * @api\n   */\n  this.key = key;\n\n  /**\n   * The old value. To get the new value use `e.target.get(e.key)` where\n   * `e` is the event object.\n   * @type {*}\n   * @api\n   */\n  this.oldValue = oldValue;\n\n};\n_ol_.inherits(_ol_Object_.Event, _ol_events_Event_);\nexport default _ol_Object_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}