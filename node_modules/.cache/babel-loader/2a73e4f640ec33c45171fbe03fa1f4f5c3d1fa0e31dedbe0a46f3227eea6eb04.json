{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Components/Header\";\nimport { Container, Form } from \"react-bootstrap\";\nimport Footer from \"./Components/Footer\";\nimport Menu from \"./Components/Menu\";\nimport \"./assests/App.css\";\nimport Map from './Components/Map';\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // \nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [json, setJson] = useState(null);\n  const getData = data => {\n    console.log(data);\n    setData(data);\n    // Fetch all parcels using Axios\n    axios.get(`http://127.0.0.1:5000/parcelapi/${data[1]}/${data[0]}`).then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      setJson(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  };\n  console.log(json);\n  const setColor = ({\n    properties\n  }) => {\n    return {\n      weight: 1\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"py-3\",\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Menu, {\n          onSubmit: getData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n          center: [14.00, 77.22],\n          zoom: 7,\n          className: \"map-container\",\n          children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n            url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n            attribution: \"\\xA9 <a href=\\\"http://osm.org/copyright\\\">OpenStreetMap</a> contributors\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 9\n          }, this), json !== null ? /*#__PURE__*/_jsxDEV(GeoJSON, {\n            data: json,\n            style: setColor\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 9\n          }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"yV8riFHvR1T+yjMxlbfqhMRB0fU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Header","Container","Form","Footer","Menu","Map","TileLayer","MapContainer","GeoJSON","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","data","setData","json","setJson","getData","console","log","get","then","response","Error","catch","error","setColor","properties","weight","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onSubmit","center","zoom","url","attribution","style","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/App.js"],"sourcesContent":["import React, {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport Header from \"./Components/Header\";\nimport { Container, Form } from \"react-bootstrap\";\nimport Footer from \"./Components/Footer\";\nimport Menu from \"./Components/Menu\";\nimport \"./assests/App.css\";\nimport Map from './Components/Map'\nimport { TileLayer, MapContainer, GeoJSON } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\"; // \n\nconst App = () => {\n  const[data, setData] = useState([])\n  const [json, setJson] = useState(null)\n  const getData = (data) => {\n    console.log(data)\n    setData(data)\n    // Fetch all parcels using Axios\n    axios\n      .get(`http://127.0.0.1:5000/parcelapi/${data[1]}/${data[0]}`)\n      .then((response) => {\n        if (!response.data) {\n          throw new Error(\"Empty response or response data is not valid JSON\");\n        }\n        setJson(response.data);\n\n      })\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\n  }\n          console.log(json)\n  const setColor = ({ properties }) => {\n    return { weight: 1 };\n  };\n  return (\n    <>\n      <Header />\n      <main className=\"py-3\">\n        <Container>\n          \n          <Menu onSubmit = {getData}/>\n          <MapContainer\n        center={[14.00, 77.22]}\n        zoom={7}\n        className=\"map-container\"\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {json !== null ? (\n        <GeoJSON data={json} style={setColor}/>\n        ) : (<></>)}\n      </MapContainer>\n        </Container>\n      </main>\n      <Footer />\n    </>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}