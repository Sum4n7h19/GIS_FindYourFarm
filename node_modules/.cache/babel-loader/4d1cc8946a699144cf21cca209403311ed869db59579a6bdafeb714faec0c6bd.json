{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\wwwsu\\\\Desktop\\\\Parcel\\\\findyourfarm\\\\src\\\\Components\\\\Menu.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Form, FormGroup, FormLabel, FormControl, Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport Select from \"react-dropdown-select\";\nimport \"../assests/App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Menu = () => {\n  _s();\n  const [parcels, setParcels] = useState([]);\n  const [selectedState, setSelectedState] = useState(null);\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\n  const [selectedTaluk, setSelectedTaluk] = useState(null);\n  const [selectedHobli, setSelectedHobli] = useState(null);\n  const [selectedVillage, setSelectedVillage] = useState(null);\n  useEffect(() => {\n    // Fetch all parcels using Axios\n    axios.get(\"http://127.0.0.1:5000/parcel\").then(response => {\n      if (!response.data) {\n        throw new Error(\"Empty response or response data is not valid JSON\");\n      }\n      setParcels(response.data);\n    }).catch(error => console.error(\"Error fetching parcels:\", error));\n  }, []);\n\n  // Filter options based on the selected values\n  const getFilteredOptions = (field, selectedValue) => {\n    const filteredOptions = [...new Map(parcels.filter(parcel => parcel[field] === selectedValue).map(parcel => [parcel.Event_id, parcel])).values()];\n    return filteredOptions.map(parcel => ({\n      value: parcel.Event_id,\n      label: `${parcel[field]}`\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"menu\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Select the Farm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"stateDropdown\",\n        options: getFilteredOptions(\"KGISStateName\", null),\n        value: selectedState,\n        onChange: values => {\n          setSelectedState(values[0]);\n          setSelectedDistrict(null);\n          setSelectedTaluk(null);\n          setSelectedHobli(null);\n          setSelectedVillage(null);\n        },\n        placeholder: \"Select State\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), selectedState && /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"districtDropdown\",\n        options: getFilteredOptions(\"KGISDistrictName\", selectedState.label),\n        value: selectedDistrict,\n        onChange: values => {\n          setSelectedDistrict(values[0]);\n          setSelectedTaluk(null);\n          setSelectedHobli(null);\n          setSelectedVillage(null);\n        },\n        placeholder: \"Select District\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), selectedDistrict && /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"talukDropdown\",\n        options: getFilteredOptions(\"KGISTalukName\", selectedDistrict.label),\n        value: selectedTaluk,\n        onChange: values => {\n          setSelectedTaluk(values[0]);\n          setSelectedHobli(null);\n          setSelectedVillage(null);\n        },\n        placeholder: \"Select Taluk\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }, this), selectedTaluk && /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"hobliDropdown\",\n        options: getFilteredOptions(\"KGISHobliName\", selectedTaluk.label),\n        value: selectedHobli,\n        onChange: values => {\n          setSelectedHobli(values[0]);\n          setSelectedVillage(null);\n        },\n        placeholder: \"Select Hobli\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), selectedHobli && /*#__PURE__*/_jsxDEV(Select, {\n        className: \"select\",\n        id: \"villageDropdown\",\n        options: getFilteredOptions(\"KGISVillageName\", selectedHobli.label),\n        value: selectedVillage,\n        onChange: values => {\n          setSelectedVillage(values[0]);\n        },\n        placeholder: \"Select Village\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(Menu, \"gOSWcNgPOsOYMuD8jpsz9wQbTB4=\");\n_c = Menu;\nexport default Menu;\nvar _c;\n$RefreshReg$(_c, \"Menu\");","map":{"version":3,"names":["React","useEffect","useState","Form","FormGroup","FormLabel","FormControl","Button","axios","Select","jsxDEV","_jsxDEV","Menu","_s","parcels","setParcels","selectedState","setSelectedState","selectedDistrict","setSelectedDistrict","selectedTaluk","setSelectedTaluk","selectedHobli","setSelectedHobli","selectedVillage","setSelectedVillage","get","then","response","data","Error","catch","error","console","getFilteredOptions","field","selectedValue","filteredOptions","Map","filter","parcel","map","Event_id","values","value","label","className","children","fileName","_jsxFileName","lineNumber","columnNumber","id","options","onChange","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/src/Components/Menu.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Form,\r\n  FormGroup,\r\n  FormLabel,\r\n  FormControl,\r\n  Button,\r\n} from \"react-bootstrap\";\r\nimport axios from \"axios\";\r\nimport Select from \"react-dropdown-select\";\r\nimport \"../assests/App.css\";\r\n\r\nconst Menu = () => {\r\n  const [parcels, setParcels] = useState([]);\r\n  const [selectedState, setSelectedState] = useState(null);\r\n  const [selectedDistrict, setSelectedDistrict] = useState(null);\r\n  const [selectedTaluk, setSelectedTaluk] = useState(null);\r\n  const [selectedHobli, setSelectedHobli] = useState(null);\r\n  const [selectedVillage, setSelectedVillage] = useState(null);\r\n\r\n  useEffect(() => {\r\n    // Fetch all parcels using Axios\r\n    axios\r\n      .get(\"http://127.0.0.1:5000/parcel\")\r\n      .then((response) => {\r\n        if (!response.data) {\r\n          throw new Error(\"Empty response or response data is not valid JSON\");\r\n        }\r\n        setParcels(response.data);\r\n      })\r\n      .catch((error) => console.error(\"Error fetching parcels:\", error));\r\n  }, []);\r\n\r\n  // Filter options based on the selected values\r\n  const getFilteredOptions = (field, selectedValue) => {\r\n    const filteredOptions = [\r\n      ...new Map(parcels.filter((parcel) => parcel[field] === selectedValue).map((parcel) => [parcel.Event_id, parcel])).values(),\r\n    ];\r\n\r\n    return filteredOptions.map((parcel) => ({\r\n      value: parcel.Event_id,\r\n      label: `${parcel[field]}`,\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"menu\">\r\n      <div className=\"container\">\r\n        <h1>Select the Farm</h1>\r\n\r\n        <Select\r\n          className=\"select\"\r\n          id=\"stateDropdown\"\r\n          options={getFilteredOptions(\"KGISStateName\", null)}\r\n          value={selectedState}\r\n          onChange={(values) => {\r\n            setSelectedState(values[0]);\r\n            setSelectedDistrict(null);\r\n            setSelectedTaluk(null);\r\n            setSelectedHobli(null);\r\n            setSelectedVillage(null);\r\n          }}\r\n          placeholder=\"Select State\"\r\n        />\r\n\r\n        {selectedState && (\r\n          <Select\r\n            className=\"select\"\r\n            id=\"districtDropdown\"\r\n            options={getFilteredOptions(\"KGISDistrictName\", selectedState.label)}\r\n            value={selectedDistrict}\r\n            onChange={(values) => {\r\n              setSelectedDistrict(values[0]);\r\n              setSelectedTaluk(null);\r\n              setSelectedHobli(null);\r\n              setSelectedVillage(null);\r\n            }}\r\n            placeholder=\"Select District\"\r\n          />\r\n        )}\r\n\r\n        {selectedDistrict && (\r\n          <Select\r\n            className=\"select\"\r\n            id=\"talukDropdown\"\r\n            options={getFilteredOptions(\"KGISTalukName\", selectedDistrict.label)}\r\n            value={selectedTaluk}\r\n            onChange={(values) => {\r\n              setSelectedTaluk(values[0]);\r\n              setSelectedHobli(null);\r\n              setSelectedVillage(null);\r\n            }}\r\n            placeholder=\"Select Taluk\"\r\n          />\r\n        )}\r\n\r\n        {selectedTaluk && (\r\n          <Select\r\n            className=\"select\"\r\n            id=\"hobliDropdown\"\r\n            options={getFilteredOptions(\"KGISHobliName\", selectedTaluk.label)}\r\n            value={selectedHobli}\r\n            onChange={(values) => {\r\n              setSelectedHobli(values[0]);\r\n              setSelectedVillage(null);\r\n            }}\r\n            placeholder=\"Select Hobli\"\r\n          />\r\n        )}\r\n\r\n        {selectedHobli && (\r\n          <Select\r\n            className=\"select\"\r\n            id=\"villageDropdown\"\r\n            options={getFilteredOptions(\"KGISVillageName\", selectedHobli.label)}\r\n            value={selectedVillage}\r\n            onChange={(values) => {\r\n              setSelectedVillage(values[0]);\r\n            }}\r\n            placeholder=\"Select Village\"\r\n          />\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default Menu;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}