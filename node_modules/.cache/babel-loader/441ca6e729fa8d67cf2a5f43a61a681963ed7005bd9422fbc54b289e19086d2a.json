{"ast":null,"code":"import _ol_ from './index.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventTarget_ from './events/eventtarget.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link ol.Observable#changed}.\n *\n * @constructor\n * @extends {ol.events.EventTarget}\n * @fires ol.events.Event\n * @struct\n * @api\n */\nvar _ol_Observable_ = function () {\n  _ol_events_EventTarget_.call(this);\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.revision_ = 0;\n};\n_ol_.inherits(_ol_Observable_, _ol_events_EventTarget_);\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {ol.EventsKey|Array.<ol.EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n_ol_Observable_.unByKey = function (key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      _ol_events_.unlistenByKey(key[i]);\n    }\n  } else {\n    _ol_events_.unlistenByKey( /** @type {ol.EventsKey} */key);\n  }\n};\n\n/**\n * Increases the revision counter and dispatches a 'change' event.\n * @api\n */\n_ol_Observable_.prototype.changed = function () {\n  ++this.revision_;\n  this.dispatchEvent(_ol_events_EventType_.CHANGE);\n};\n\n/**\n * Dispatches an event and calls all listeners listening for events\n * of this type. The event parameter can either be a string or an\n * Object with a `type` property.\n *\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event object.\n * @function\n * @api\n */\n_ol_Observable_.prototype.dispatchEvent;\n\n/**\n * Get the version number for this object.  Each time the object is modified,\n * its version number will be incremented.\n * @return {number} Revision.\n * @api\n */\n_ol_Observable_.prototype.getRevision = function () {\n  return this.revision_;\n};\n\n/**\n * Listen for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.on = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listen(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listen(this, /** @type {string} */type, listener, opt_this);\n  }\n};\n\n/**\n * Listen once for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.once = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listenOnce(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listenOnce(this, /** @type {string} */type, listener, opt_this);\n  }\n};\n\n/**\n * Unlisten for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object which was used as `this` by the\n * `listener`.\n * @api\n */\n_ol_Observable_.prototype.un = function (type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    for (var i = 0, ii = type.length; i < ii; ++i) {\n      _ol_events_.unlisten(this, type[i], listener, opt_this);\n    }\n    return;\n  } else {\n    _ol_events_.unlisten(this, /** @type {string} */type, listener, opt_this);\n  }\n};\nexport default _ol_Observable_;","map":{"version":3,"names":["_ol_","_ol_events_","_ol_events_EventTarget_","_ol_events_EventType_","_ol_Observable_","call","revision_","inherits","unByKey","key","Array","isArray","i","ii","length","unlistenByKey","prototype","changed","dispatchEvent","CHANGE","getRevision","on","type","listener","opt_this","len","keys","listen","once","listenOnce","un","unlisten"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/node_modules/ol/observable.js"],"sourcesContent":["import _ol_ from './index.js';\nimport _ol_events_ from './events.js';\nimport _ol_events_EventTarget_ from './events/eventtarget.js';\nimport _ol_events_EventType_ from './events/eventtype.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link ol.Observable#changed}.\n *\n * @constructor\n * @extends {ol.events.EventTarget}\n * @fires ol.events.Event\n * @struct\n * @api\n */\nvar _ol_Observable_ = function() {\n\n  _ol_events_EventTarget_.call(this);\n\n  /**\n   * @private\n   * @type {number}\n   */\n  this.revision_ = 0;\n\n};\n\n_ol_.inherits(_ol_Observable_, _ol_events_EventTarget_);\n\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {ol.EventsKey|Array.<ol.EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\n_ol_Observable_.unByKey = function(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      _ol_events_.unlistenByKey(key[i]);\n    }\n  } else {\n    _ol_events_.unlistenByKey(/** @type {ol.EventsKey} */ (key));\n  }\n};\n\n\n/**\n * Increases the revision counter and dispatches a 'change' event.\n * @api\n */\n_ol_Observable_.prototype.changed = function() {\n  ++this.revision_;\n  this.dispatchEvent(_ol_events_EventType_.CHANGE);\n};\n\n\n/**\n * Dispatches an event and calls all listeners listening for events\n * of this type. The event parameter can either be a string or an\n * Object with a `type` property.\n *\n * @param {{type: string,\n *     target: (EventTarget|ol.events.EventTarget|undefined)}|ol.events.Event|\n *     string} event Event object.\n * @function\n * @api\n */\n_ol_Observable_.prototype.dispatchEvent;\n\n\n/**\n * Get the version number for this object.  Each time the object is modified,\n * its version number will be incremented.\n * @return {number} Revision.\n * @api\n */\n_ol_Observable_.prototype.getRevision = function() {\n  return this.revision_;\n};\n\n\n/**\n * Listen for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.on = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listen(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listen(\n        this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\n\n\n/**\n * Listen once for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object to use as `this` in `listener`.\n * @return {ol.EventsKey|Array.<ol.EventsKey>} Unique key for the listener. If\n *     called with an array of event types as the first argument, the return\n *     will be an array of keys.\n * @api\n */\n_ol_Observable_.prototype.once = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    var len = type.length;\n    var keys = new Array(len);\n    for (var i = 0; i < len; ++i) {\n      keys[i] = _ol_events_.listenOnce(this, type[i], listener, opt_this);\n    }\n    return keys;\n  } else {\n    return _ol_events_.listenOnce(\n        this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\n\n\n/**\n * Unlisten for a certain type of event.\n * @param {string|Array.<string>} type The event type or array of event types.\n * @param {function(?): ?} listener The listener function.\n * @param {Object=} opt_this The object which was used as `this` by the\n * `listener`.\n * @api\n */\n_ol_Observable_.prototype.un = function(type, listener, opt_this) {\n  if (Array.isArray(type)) {\n    for (var i = 0, ii = type.length; i < ii; ++i) {\n      _ol_events_.unlisten(this, type[i], listener, opt_this);\n    }\n    return;\n  } else {\n    _ol_events_.unlisten(this, /** @type {string} */ (type), listener, opt_this);\n  }\n};\nexport default _ol_Observable_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}