{"ast":null,"code":"// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport _ol_ from '../index.js';\nimport _ol_asserts_ from '../asserts.js';\nimport _ol_Feature_ from '../feature.js';\nimport _ol_format_Feature_ from '../format/feature.js';\nimport _ol_format_JSONFeature_ from '../format/jsonfeature.js';\nimport _ol_geom_GeometryCollection_ from '../geom/geometrycollection.js';\nimport _ol_geom_LineString_ from '../geom/linestring.js';\nimport _ol_geom_MultiLineString_ from '../geom/multilinestring.js';\nimport _ol_geom_MultiPoint_ from '../geom/multipoint.js';\nimport _ol_geom_MultiPolygon_ from '../geom/multipolygon.js';\nimport _ol_geom_Point_ from '../geom/point.js';\nimport _ol_geom_Polygon_ from '../geom/polygon.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_proj_ from '../proj.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {ol.format.JSONFeature}\n * @param {olx.format.GeoJSONOptions=} opt_options Options.\n * @api\n */\nvar _ol_format_GeoJSON_ = function (opt_options) {\n  var options = opt_options ? opt_options : {};\n  _ol_format_JSONFeature_.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.defaultDataProjection = _ol_proj_.get(options.defaultDataProjection ? options.defaultDataProjection : 'EPSG:4326');\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = _ol_proj_.get(options.featureProjection);\n  }\n\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n  this.geometryName_ = options.geometryName;\n\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n  this.extractGeometryName_ = options.extractGeometryName;\n};\n_ol_.inherits(_ol_format_GeoJSON_, _ol_format_JSONFeature_);\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @private\n * @return {ol.geom.Geometry} Geometry.\n */\n_ol_format_GeoJSON_.readGeometry_ = function (object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  var geometryReader = _ol_format_GeoJSON_.GEOMETRY_READERS_[object.type];\n  return /** @type {ol.geom.Geometry} */_ol_format_Feature_.transformWithOptions(geometryReader(object), false, opt_options);\n};\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @private\n * @return {ol.geom.GeometryCollection} Geometry collection.\n */\n_ol_format_GeoJSON_.readGeometryCollectionGeometry_ = function (object, opt_options) {\n  var geometries = object.geometries.map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {ol.geom.Geometry} geometry Geometry.\n   */\n  function (geometry) {\n    return _ol_format_GeoJSON_.readGeometry_(geometry, opt_options);\n  });\n  return new _ol_geom_GeometryCollection_(geometries);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.Point} Point.\n */\n_ol_format_GeoJSON_.readPointGeometry_ = function (object) {\n  return new _ol_geom_Point_(object.coordinates);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.LineString} LineString.\n */\n_ol_format_GeoJSON_.readLineStringGeometry_ = function (object) {\n  return new _ol_geom_LineString_(object.coordinates);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiLineString} MultiLineString.\n */\n_ol_format_GeoJSON_.readMultiLineStringGeometry_ = function (object) {\n  return new _ol_geom_MultiLineString_(object.coordinates);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiPoint} MultiPoint.\n */\n_ol_format_GeoJSON_.readMultiPointGeometry_ = function (object) {\n  return new _ol_geom_MultiPoint_(object.coordinates);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n */\n_ol_format_GeoJSON_.readMultiPolygonGeometry_ = function (object) {\n  return new _ol_geom_MultiPolygon_(object.coordinates);\n};\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.Polygon} Polygon.\n */\n_ol_format_GeoJSON_.readPolygonGeometry_ = function (object) {\n  return new _ol_geom_Polygon_(object.coordinates);\n};\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeGeometry_ = function (geometry, opt_options) {\n  var geometryWriter = _ol_format_GeoJSON_.GEOMETRY_WRITERS_[geometry.getType()];\n  return geometryWriter( /** @type {ol.geom.Geometry} */\n  _ol_format_Feature_.transformWithOptions(geometry, true, opt_options), opt_options);\n};\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @private\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\n_ol_format_GeoJSON_.writeEmptyGeometryCollectionGeometry_ = function (geometry) {\n  return /** @type {GeoJSONGeometryCollection} */{\n    type: 'GeometryCollection',\n    geometries: []\n  };\n};\n\n/**\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n_ol_format_GeoJSON_.writeGeometryCollectionGeometry_ = function (geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = _ol_obj_.assign({}, opt_options);\n    delete options.featureProjection;\n    return _ol_format_GeoJSON_.writeGeometry_(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */{\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n};\n\n/**\n * @param {ol.geom.LineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeLineStringGeometry_ = function (geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */{\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n};\n\n/**\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiLineStringGeometry_ = function (geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */{\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n};\n\n/**\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiPointGeometry_ = function (geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */{\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n};\n\n/**\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiPolygonGeometry_ = function (geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */{\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n};\n\n/**\n * @param {ol.geom.Point} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writePointGeometry_ = function (geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */{\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n};\n\n/**\n * @param {ol.geom.Polygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writePolygonGeometry_ = function (geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */{\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n};\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(GeoJSONObject): ol.geom.Geometry>}\n */\n_ol_format_GeoJSON_.GEOMETRY_READERS_ = {\n  'Point': _ol_format_GeoJSON_.readPointGeometry_,\n  'LineString': _ol_format_GeoJSON_.readLineStringGeometry_,\n  'Polygon': _ol_format_GeoJSON_.readPolygonGeometry_,\n  'MultiPoint': _ol_format_GeoJSON_.readMultiPointGeometry_,\n  'MultiLineString': _ol_format_GeoJSON_.readMultiLineStringGeometry_,\n  'MultiPolygon': _ol_format_GeoJSON_.readMultiPolygonGeometry_,\n  'GeometryCollection': _ol_format_GeoJSON_.readGeometryCollectionGeometry_\n};\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(ol.geom.Geometry, olx.format.WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\n_ol_format_GeoJSON_.GEOMETRY_WRITERS_ = {\n  'Point': _ol_format_GeoJSON_.writePointGeometry_,\n  'LineString': _ol_format_GeoJSON_.writeLineStringGeometry_,\n  'Polygon': _ol_format_GeoJSON_.writePolygonGeometry_,\n  'MultiPoint': _ol_format_GeoJSON_.writeMultiPointGeometry_,\n  'MultiLineString': _ol_format_GeoJSON_.writeMultiLineStringGeometry_,\n  'MultiPolygon': _ol_format_GeoJSON_.writeMultiPolygonGeometry_,\n  'GeometryCollection': _ol_format_GeoJSON_.writeGeometryCollectionGeometry_,\n  'Circle': _ol_format_GeoJSON_.writeEmptyGeometryCollectionGeometry_\n};\n\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link ol.format.GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link ol.Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readFeature;\n\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readFeatures;\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readFeatureFromObject = function (object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  var geoJSONFeature = null;\n  if (object.type === 'Feature') {\n    geoJSONFeature = /** @type {GeoJSONFeature} */object;\n  } else {\n    geoJSONFeature = /** @type {GeoJSONFeature} */{\n      type: 'Feature',\n      geometry: ( /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */object)\n    };\n  }\n  var geometry = _ol_format_GeoJSON_.readGeometry_(geoJSONFeature.geometry, opt_options);\n  var feature = new _ol_Feature_();\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n  feature.setGeometry(geometry);\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n  return feature;\n};\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readFeaturesFromObject = function (object, opt_options) {\n  var geoJSONObject = /** @type {GeoJSONObject} */object;\n  /** @type {Array.<ol.Feature>} */\n  var features = null;\n  if (geoJSONObject.type === 'FeatureCollection') {\n    var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n    object;\n    features = [];\n    var geoJSONFeatures = geoJSONFeatureCollection.features;\n    var i, ii;\n    for (i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n  return features;\n};\n\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readGeometry;\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readGeometryFromObject = function (object, opt_options) {\n  return _ol_format_GeoJSON_.readGeometry_( /** @type {GeoJSONGeometry} */object, opt_options);\n};\n\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readProjection;\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readProjectionFromObject = function (object) {\n  var geoJSONObject = /** @type {GeoJSONObject} */object;\n  var crs = geoJSONObject.crs;\n  var projection;\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = _ol_proj_.get(crs.properties.name);\n    } else {\n      _ol_asserts_.assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.defaultDataProjection;\n  }\n  return /** @type {ol.proj.Projection} */projection;\n};\n\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeature;\n\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeatureObject = function (feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  var object = /** @type {GeoJSONFeature} */{\n    'type': 'Feature'\n  };\n  var id = feature.getId();\n  if (id !== undefined) {\n    object.id = id;\n  }\n  var geometry = feature.getGeometry();\n  if (geometry) {\n    object.geometry = _ol_format_GeoJSON_.writeGeometry_(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n  var properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n  if (!_ol_obj_.isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n  return object;\n};\n\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeatures;\n\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeaturesObject = function (features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  var objects = [];\n  var i, ii;\n  for (i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n  return /** @type {GeoJSONFeatureCollection} */{\n    type: 'FeatureCollection',\n    features: objects\n  };\n};\n\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeGeometry;\n\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeGeometryObject = function (geometry, opt_options) {\n  return _ol_format_GeoJSON_.writeGeometry_(geometry, this.adaptOptions(opt_options));\n};\nexport default _ol_format_GeoJSON_;","map":{"version":3,"names":["_ol_","_ol_asserts_","_ol_Feature_","_ol_format_Feature_","_ol_format_JSONFeature_","_ol_geom_GeometryCollection_","_ol_geom_LineString_","_ol_geom_MultiLineString_","_ol_geom_MultiPoint_","_ol_geom_MultiPolygon_","_ol_geom_Point_","_ol_geom_Polygon_","_ol_obj_","_ol_proj_","_ol_format_GeoJSON_","opt_options","options","call","defaultDataProjection","get","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","inherits","readGeometry_","object","geometryReader","GEOMETRY_READERS_","type","transformWithOptions","readGeometryCollectionGeometry_","geometries","map","geometry","readPointGeometry_","coordinates","readLineStringGeometry_","readMultiLineStringGeometry_","readMultiPointGeometry_","readMultiPolygonGeometry_","readPolygonGeometry_","writeGeometry_","geometryWriter","GEOMETRY_WRITERS_","getType","writeEmptyGeometryCollectionGeometry_","writeGeometryCollectionGeometry_","getGeometriesArray","assign","writeLineStringGeometry_","getCoordinates","writeMultiLineStringGeometry_","writeMultiPointGeometry_","writeMultiPolygonGeometry_","right","rightHanded","writePointGeometry_","writePolygonGeometry_","prototype","readFeature","readFeatures","readFeatureFromObject","geoJSONFeature","feature","setGeometryName","geometry_name","undefined","setGeometry","id","setId","properties","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readGeometry","readGeometryFromObject","readProjection","readProjectionFromObject","crs","projection","name","assert","writeFeature","writeFeatureObject","adaptOptions","getId","getGeometry","getProperties","getGeometryName","isEmpty","writeFeatures","writeFeaturesObject","objects","writeGeometry","writeGeometryObject"],"sources":["C:/Users/wwwsu/Desktop/Parcel/findyourfarm/node_modules/ol/format/geojson.js"],"sourcesContent":["// TODO: serialize dataProjection as crs member when writing\n// see https://github.com/openlayers/openlayers/issues/2078\n\nimport _ol_ from '../index.js';\nimport _ol_asserts_ from '../asserts.js';\nimport _ol_Feature_ from '../feature.js';\nimport _ol_format_Feature_ from '../format/feature.js';\nimport _ol_format_JSONFeature_ from '../format/jsonfeature.js';\nimport _ol_geom_GeometryCollection_ from '../geom/geometrycollection.js';\nimport _ol_geom_LineString_ from '../geom/linestring.js';\nimport _ol_geom_MultiLineString_ from '../geom/multilinestring.js';\nimport _ol_geom_MultiPoint_ from '../geom/multipoint.js';\nimport _ol_geom_MultiPolygon_ from '../geom/multipolygon.js';\nimport _ol_geom_Point_ from '../geom/point.js';\nimport _ol_geom_Polygon_ from '../geom/polygon.js';\nimport _ol_obj_ from '../obj.js';\nimport _ol_proj_ from '../proj.js';\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @constructor\n * @extends {ol.format.JSONFeature}\n * @param {olx.format.GeoJSONOptions=} opt_options Options.\n * @api\n */\nvar _ol_format_GeoJSON_ = function(opt_options) {\n\n  var options = opt_options ? opt_options : {};\n\n  _ol_format_JSONFeature_.call(this);\n\n  /**\n   * @inheritDoc\n   */\n  this.defaultDataProjection = _ol_proj_.get(\n      options.defaultDataProjection ?\n        options.defaultDataProjection : 'EPSG:4326');\n\n\n  if (options.featureProjection) {\n    this.defaultFeatureProjection = _ol_proj_.get(options.featureProjection);\n  }\n\n  /**\n   * Name of the geometry attribute for features.\n   * @type {string|undefined}\n   * @private\n   */\n  this.geometryName_ = options.geometryName;\n\n  /**\n   * Look for the geometry name in the feature GeoJSON\n   * @type {boolean|undefined}\n   * @private\n   */\n  this.extractGeometryName_ = options.extractGeometryName;\n\n};\n\n_ol_.inherits(_ol_format_GeoJSON_, _ol_format_JSONFeature_);\n\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @private\n * @return {ol.geom.Geometry} Geometry.\n */\n_ol_format_GeoJSON_.readGeometry_ = function(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  var geometryReader = _ol_format_GeoJSON_.GEOMETRY_READERS_[object.type];\n  return (\n    /** @type {ol.geom.Geometry} */ _ol_format_Feature_.transformWithOptions(\n        geometryReader(object), false, opt_options)\n  );\n};\n\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @private\n * @return {ol.geom.GeometryCollection} Geometry collection.\n */\n_ol_format_GeoJSON_.readGeometryCollectionGeometry_ = function(\n    object, opt_options) {\n  var geometries = object.geometries.map(\n      /**\n       * @param {GeoJSONGeometry} geometry Geometry.\n       * @return {ol.geom.Geometry} geometry Geometry.\n       */\n      function(geometry) {\n        return _ol_format_GeoJSON_.readGeometry_(geometry, opt_options);\n      });\n  return new _ol_geom_GeometryCollection_(geometries);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.Point} Point.\n */\n_ol_format_GeoJSON_.readPointGeometry_ = function(object) {\n  return new _ol_geom_Point_(object.coordinates);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.LineString} LineString.\n */\n_ol_format_GeoJSON_.readLineStringGeometry_ = function(object) {\n  return new _ol_geom_LineString_(object.coordinates);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiLineString} MultiLineString.\n */\n_ol_format_GeoJSON_.readMultiLineStringGeometry_ = function(object) {\n  return new _ol_geom_MultiLineString_(object.coordinates);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiPoint} MultiPoint.\n */\n_ol_format_GeoJSON_.readMultiPointGeometry_ = function(object) {\n  return new _ol_geom_MultiPoint_(object.coordinates);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.MultiPolygon} MultiPolygon.\n */\n_ol_format_GeoJSON_.readMultiPolygonGeometry_ = function(object) {\n  return new _ol_geom_MultiPolygon_(object.coordinates);\n};\n\n\n/**\n * @param {GeoJSONGeometry} object Object.\n * @private\n * @return {ol.geom.Polygon} Polygon.\n */\n_ol_format_GeoJSON_.readPolygonGeometry_ = function(object) {\n  return new _ol_geom_Polygon_(object.coordinates);\n};\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeGeometry_ = function(geometry, opt_options) {\n  var geometryWriter = _ol_format_GeoJSON_.GEOMETRY_WRITERS_[geometry.getType()];\n  return geometryWriter(/** @type {ol.geom.Geometry} */ (\n    _ol_format_Feature_.transformWithOptions(geometry, true, opt_options)),\n  opt_options);\n};\n\n\n/**\n * @param {ol.geom.Geometry} geometry Geometry.\n * @private\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\n */\n_ol_format_GeoJSON_.writeEmptyGeometryCollectionGeometry_ = function(geometry) {\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: []\n  });\n};\n\n\n/**\n * @param {ol.geom.GeometryCollection} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\n_ol_format_GeoJSON_.writeGeometryCollectionGeometry_ = function(\n    geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function(geometry) {\n    var options = _ol_obj_.assign({}, opt_options);\n    delete options.featureProjection;\n    return _ol_format_GeoJSON_.writeGeometry_(geometry, options);\n  });\n  return /** @type {GeoJSONGeometryCollection} */ ({\n    type: 'GeometryCollection',\n    geometries: geometries\n  });\n};\n\n\n/**\n * @param {ol.geom.LineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeLineStringGeometry_ = function(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  });\n};\n\n\n/**\n * @param {ol.geom.MultiLineString} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiLineStringGeometry_ = function(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  });\n};\n\n\n/**\n * @param {ol.geom.MultiPoint} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiPointGeometry_ = function(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  });\n};\n\n\n/**\n * @param {ol.geom.MultiPolygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writeMultiPolygonGeometry_ = function(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n};\n\n\n/**\n * @param {ol.geom.Point} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writePointGeometry_ = function(geometry, opt_options) {\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  });\n};\n\n\n/**\n * @param {ol.geom.Polygon} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @private\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\n_ol_format_GeoJSON_.writePolygonGeometry_ = function(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return /** @type {GeoJSONGeometry} */ ({\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  });\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(GeoJSONObject): ol.geom.Geometry>}\n */\n_ol_format_GeoJSON_.GEOMETRY_READERS_ = {\n  'Point': _ol_format_GeoJSON_.readPointGeometry_,\n  'LineString': _ol_format_GeoJSON_.readLineStringGeometry_,\n  'Polygon': _ol_format_GeoJSON_.readPolygonGeometry_,\n  'MultiPoint': _ol_format_GeoJSON_.readMultiPointGeometry_,\n  'MultiLineString': _ol_format_GeoJSON_.readMultiLineStringGeometry_,\n  'MultiPolygon': _ol_format_GeoJSON_.readMultiPolygonGeometry_,\n  'GeometryCollection': _ol_format_GeoJSON_.readGeometryCollectionGeometry_\n};\n\n\n/**\n * @const\n * @private\n * @type {Object.<string, function(ol.geom.Geometry, olx.format.WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\n */\n_ol_format_GeoJSON_.GEOMETRY_WRITERS_ = {\n  'Point': _ol_format_GeoJSON_.writePointGeometry_,\n  'LineString': _ol_format_GeoJSON_.writeLineStringGeometry_,\n  'Polygon': _ol_format_GeoJSON_.writePolygonGeometry_,\n  'MultiPoint': _ol_format_GeoJSON_.writeMultiPointGeometry_,\n  'MultiLineString': _ol_format_GeoJSON_.writeMultiLineStringGeometry_,\n  'MultiPolygon': _ol_format_GeoJSON_.writeMultiPolygonGeometry_,\n  'GeometryCollection': _ol_format_GeoJSON_.writeGeometryCollectionGeometry_,\n  'Circle': _ol_format_GeoJSON_.writeEmptyGeometryCollectionGeometry_\n};\n\n\n/**\n * Read a feature from a GeoJSON Feature source.  Only works for Feature or\n * geometry types.  Use {@link ol.format.GeoJSON#readFeatures} to read\n * FeatureCollection source. If feature at source has an id, it will be used\n * as Feature id by calling {@link ol.Feature#setId} internally.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.Feature} Feature.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readFeature;\n\n\n/**\n * Read all features from a GeoJSON source.  Works for all GeoJSON types.\n * If the source includes only geometries, features will be created with those\n * geometries.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {Array.<ol.Feature>} Features.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readFeatures;\n\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readFeatureFromObject = function(\n    object, opt_options) {\n  /**\n   * @type {GeoJSONFeature}\n   */\n  var geoJSONFeature = null;\n  if (object.type === 'Feature') {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n  } else {\n    geoJSONFeature = /** @type {GeoJSONFeature} */ ({\n      type: 'Feature',\n      geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\n    });\n  }\n\n  var geometry = _ol_format_GeoJSON_.readGeometry_(geoJSONFeature.geometry, opt_options);\n  var feature = new _ol_Feature_();\n  if (this.geometryName_) {\n    feature.setGeometryName(this.geometryName_);\n  } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\n    feature.setGeometryName(geoJSONFeature.geometry_name);\n  }\n  feature.setGeometry(geometry);\n  if (geoJSONFeature.id !== undefined) {\n    feature.setId(geoJSONFeature.id);\n  }\n  if (geoJSONFeature.properties) {\n    feature.setProperties(geoJSONFeature.properties);\n  }\n  return feature;\n};\n\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readFeaturesFromObject = function(\n    object, opt_options) {\n  var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  /** @type {Array.<ol.Feature>} */\n  var features = null;\n  if (geoJSONObject.type === 'FeatureCollection') {\n    var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */\n        (object);\n    features = [];\n    var geoJSONFeatures = geoJSONFeatureCollection.features;\n    var i, ii;\n    for (i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n      features.push(this.readFeatureFromObject(geoJSONFeatures[i],\n          opt_options));\n    }\n  } else {\n    features = [this.readFeatureFromObject(object, opt_options)];\n  }\n  return features;\n};\n\n\n/**\n * Read a geometry from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @param {olx.format.ReadOptions=} opt_options Read options.\n * @return {ol.geom.Geometry} Geometry.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readGeometry;\n\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readGeometryFromObject = function(\n    object, opt_options) {\n  return _ol_format_GeoJSON_.readGeometry_(\n      /** @type {GeoJSONGeometry} */ (object), opt_options);\n};\n\n\n/**\n * Read the projection from a GeoJSON source.\n *\n * @function\n * @param {Document|Node|Object|string} source Source.\n * @return {ol.proj.Projection} Projection.\n * @api\n */\n_ol_format_GeoJSON_.prototype.readProjection;\n\n\n/**\n * @inheritDoc\n */\n_ol_format_GeoJSON_.prototype.readProjectionFromObject = function(object) {\n  var geoJSONObject = /** @type {GeoJSONObject} */ (object);\n  var crs = geoJSONObject.crs;\n  var projection;\n  if (crs) {\n    if (crs.type == 'name') {\n      projection = _ol_proj_.get(crs.properties.name);\n    } else {\n      _ol_asserts_.assert(false, 36); // Unknown SRS type\n    }\n  } else {\n    projection = this.defaultDataProjection;\n  }\n  return /** @type {ol.proj.Projection} */ (projection);\n};\n\n\n/**\n * Encode a feature as a GeoJSON Feature string.\n *\n * @function\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeature;\n\n\n/**\n * Encode a feature as a GeoJSON Feature object.\n *\n * @param {ol.Feature} feature Feature.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeature} Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeatureObject = function(feature, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n\n  var object = /** @type {GeoJSONFeature} */ ({\n    'type': 'Feature'\n  });\n  var id = feature.getId();\n  if (id !== undefined) {\n    object.id = id;\n  }\n  var geometry = feature.getGeometry();\n  if (geometry) {\n    object.geometry =\n        _ol_format_GeoJSON_.writeGeometry_(geometry, opt_options);\n  } else {\n    object.geometry = null;\n  }\n  var properties = feature.getProperties();\n  delete properties[feature.getGeometryName()];\n  if (!_ol_obj_.isEmpty(properties)) {\n    object.properties = properties;\n  } else {\n    object.properties = null;\n  }\n  return object;\n};\n\n\n/**\n * Encode an array of features as GeoJSON.\n *\n * @function\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeatures;\n\n\n/**\n * Encode an array of features as a GeoJSON object.\n *\n * @param {Array.<ol.Feature>} features Features.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONFeatureCollection} GeoJSON Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeFeaturesObject = function(features, opt_options) {\n  opt_options = this.adaptOptions(opt_options);\n  var objects = [];\n  var i, ii;\n  for (i = 0, ii = features.length; i < ii; ++i) {\n    objects.push(this.writeFeatureObject(features[i], opt_options));\n  }\n  return /** @type {GeoJSONFeatureCollection} */ ({\n    type: 'FeatureCollection',\n    features: objects\n  });\n};\n\n\n/**\n * Encode a geometry as a GeoJSON string.\n *\n * @function\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {string} GeoJSON.\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeGeometry;\n\n\n/**\n * Encode a geometry as a GeoJSON object.\n *\n * @param {ol.geom.Geometry} geometry Geometry.\n * @param {olx.format.WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n * @override\n * @api\n */\n_ol_format_GeoJSON_.prototype.writeGeometryObject = function(geometry,\n    opt_options) {\n  return _ol_format_GeoJSON_.writeGeometry_(geometry,\n      this.adaptOptions(opt_options));\n};\nexport default _ol_format_GeoJSON_;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}